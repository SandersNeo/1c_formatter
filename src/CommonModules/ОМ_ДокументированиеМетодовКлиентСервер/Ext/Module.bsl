// Репозиторий проекта: 
// https://github.com/vladimir-kharin/1c_formatter
// 
// Харин Владимир (С) 2025. https://vharin.ru
// Telegram - https://t.me/vladimir_kharin

#Область ПрограммныйИнтерфейс

// Документирует метод по его имени и тексту модуля, используя API OpenAI для анализа и генерации документации.
// 
// Параметры:
//  ИмяМетода       - Строка - Имя метода, который необходимо документировать.
//  ТекстМодуля     - Строка - Текст модуля, содержащий метод для документирования.
//  КлючAPI         - Строка - Ключ API для доступа к сервису OpenAI.
//  БазовыйАдрес    - Строка - Базовый адрес сервиса OpenAI.
//  Модель          - Строка - Модель OpenAI, используемая для генерации документации.
//  ДопИнфоКонтекст - Строка - Дополнительная информация или контекст для анализа метода (необязательный параметр).
// 
// Возвращаемое значение:
// Структура - Описание метода в формате JSON, включая его параметры и возвращаемое значение.
Функция ДокументироватьМетодПоМодулю(ИмяМетода, ТекстМодуля, КлючAPI, БазовыйАдрес, Модель, ДопИнфоКонтекст = "") Экспорт

	ТекстПромпта = СформироватьПромптДляДокументированияАнализируяВесьМодуль(ТекстМодуля, ИмяМетода, ДопИнфоКонтекст);
	ОтветМоделиСтр = ОМ_КлиентИИ.ОтправитьЗапросOpenAI(ТекстПромпта, КлючAPI, БазовыйАдрес, Модель);
	
	Возврат РазобратьОтветДокументирования(ОтветМоделиСтр);

КонецФункции

// Документирует метод, используя сервис по умолчанию, на основе текста модуля и имени метода.
// 
// Параметры:
//  ИмяМетода       - Строка - Имя метода, который необходимо документировать
//  ТекстМодуля     - Строка - Текст модуля, содержащего метод
//  ДопИнфоКонтекст - Строка - Дополнительная информация для контекста документации (необязательный параметр)
// 
// Возвращаемое значение:
// Структура - Описание метода в формате JSON
Функция ДокументироватьМетодПоМодулюСервисомПоУмолчанию(ИмяМетода, ТекстМодуля, ДопИнфоКонтекст = "") Экспорт

	Соединение = Новый HTTPСоединение("vharin.ru", , , , , , Новый ЗащищенноеСоединениеOpenSSL);
	Запрос = Новый HTTPЗапрос;
	Запрос.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	Запрос.АдресРесурса = "/ai_api/module_method_doc";
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("method_name", ИмяМетода);
	ТелоЗапроса.Вставить("module_text", ТекстМодуля);
	ТелоЗапроса.Вставить("context", ДопИнфоКонтекст);
	
	Запрос.УстановитьТелоИзСтроки(ОМ_КлиентИИ.СтруктураВJSON(ТелоЗапроса));
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение "Ошибка при обращении к сервису документирования: " + Ответ.КодСостояния + " " + Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	Возврат РазобратьОтветДокументирования(Ответ.ПолучитьТелоКакСтроку());

КонецФункции

// Документирует метод на основе его текста, используя API OpenAI для анализа и генерации документации.
// 
// Параметры:
//  ТекстМетода     - Строка - Текст метода, который необходимо документировать.
//  КлючAPI         - Строка - Ключ API для доступа к сервису OpenAI.
//  БазовыйАдрес    - Строка - Базовый адрес сервиса OpenAI.
//  Модель          - Строка - Модель OpenAI, используемая для генерации документации.
//  ДопИнфоКонтекст - Строка - Дополнительная информация или контекст, который может быть полезен для анализа метода.
// 
// Возвращаемое значение:
// Структура - Описание метода в формате JSON, включая его параметры и возвращаемое значение.
Функция ДокументироватьМетодПоТексту(ТекстМетода, КлючAPI, БазовыйАдрес, Модель, ДопИнфоКонтекст = "") Экспорт

	ТекстПромпта = СформироватьПромптДляДокументированияАнализируяТолькоМетод(ТекстМетода, ДопИнфоКонтекст);
	ОтветМоделиСтр = ОМ_КлиентИИ.ОтправитьЗапросOpenAI(ТекстПромпта, КлючAPI, БазовыйАдрес, Модель);
	
	Возврат РазобратьОтветДокументирования(ОтветМоделиСтр);

КонецФункции

// Документирует метод на основе предоставленного текста метода, используя сервис документирования по умолчанию.
// 
// Параметры:
//  ТекстМетода     - Строка - Текст метода, который необходимо документировать
//  ДопИнфоКонтекст - Строка - Дополнительная контекстная информация, которая может быть полезна для документирования (необязательный параметр)
// 
// Возвращаемое значение:
// Структура - Результат документирования метода в формате JSON
Функция ДокументироватьМетодПоТекстуСервисомПоУмолчанию(ТекстМетода, ДопИнфоКонтекст = "") Экспорт

	Соединение = Новый HTTPСоединение("vharin.ru", , , , , , Новый ЗащищенноеСоединениеOpenSSL);
	Запрос = Новый HTTPЗапрос;
	Запрос.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	Запрос.АдресРесурса = "/ai_api/standalone_method_doc";
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("method_text", ТекстМетода);
	ТелоЗапроса.Вставить("context", ДопИнфоКонтекст);
	
	Запрос.УстановитьТелоИзСтроки(ОМ_КлиентИИ.СтруктураВJSON(ТелоЗапроса));
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение "Ошибка при обращении к сервису документирования: " + Ответ.КодСостояния + " " + Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	Возврат РазобратьОтветДокументирования(Ответ.ПолучитьТелоКакСтроку());

КонецФункции

// Заполняет в таблице параметров метода тип и описание на основе массива описаний параметров, полученных от ИИ
// 
// Параметры:
//  ТаблицаПараметров        - ТаблицаЗначений - Таблица параметров метода
//  МассивОписанийПараметров - Массив          - Массив структур с описаниями параметров
Процедура ЗаполнитьТаблицуПараметровМетода(ТаблицаПараметров, МассивОписанийПараметров) Экспорт

	Для Каждого Парам Из МассивОписанийПараметров Цикл
		ИмяПараметра = Парам.name;
		НайденныеСтроки = ТаблицаПараметров.НайтиСтроки(Новый Структура("Имя", ИмяПараметра));
		Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
			СтрокаПараметр = НайденныеСтроки[0];
			Парам.Свойство("type", СтрокаПараметр.Тип);
			Парам.Свойство("descr", СтрокаПараметр.Описание);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Функция формирует текстовый промпт для документирования метода на основе анализа всего модуля, включая его код и дополнительный контекст.
// 
// Параметры:
//  ТекстМодуля     - Строка - Текст модуля, содержащий код для анализа.
//  ИмяМетода       - Строка - Имя метода, который необходимо документировать.
//  ДопИнфоКонтекст - Строка - Дополнительная информация или контекст, который может быть полезен для документирования метода (по умолчанию пустая строка).
// 
// Возвращаемое значение:
// Строка - Текстовый промпт для документирования метода.
Функция СформироватьПромптДляДокументированияАнализируяВесьМодуль(ТекстМодуля, ИмяМетода, ДопИнфоКонтекст = "") Экспорт

	ТекстПромпта = 
		"Analyze the provided 1C module code to document the specified method in JSON format.
		|
		|- Extract the method's purpose and provide a clear description.
		|- Identify and list each parameter by name, specifying its type and description.
		|- Determine the return value and describe it, including its type.
		|
		|# Steps
		|
		|1. **Locate Method**: Identify and extract the specified method from the provided module code.
		|2. **Extract Description**: Understand the functionality and purpose of the method.
		|3. **Identify Parameters**: Identify the parameters used in the method, detailing their name, type, and purpose.
		|4. **Determine Return Value**: Examine the method to understand what it returns, noting the type and a brief description.
		|
		|# Output Format
		|
		|Provide a JSON object in the following format:
		|
		|```json
		|{
		|  ""description"": ""<описание назначения метода>"",
		|  ""parameters"": [
		|    {
		|      ""name"": ""<имя параметра 1>"",
		|      ""type"": ""<тип параметра 1>"",
		|      ""descr"": ""<описание параметра 1>""
		|    },
		|    {
		|      ""name"": ""<имя параметра 2>"",
		|      ""type"": ""<тип параметра 2>"",
		|      ""descr"": ""<описание параметра 2>""
		|    }
		|  ],
		|  ""return_descr"": ""<описание возвращаемого значения в формате Тип - Описание, максимум 100 символов>""
		|}
		|
		|# Examples
		|
		|**Example Input:**
		|```1C
		|&НаСервере
		|Модуль УправлениеСотрудниками;
		|Функция ПолучитьИмя(ИдСотрудника)
		|    Возврат Справочники.Сотрудники.НайтиПоКоду(ИдСотрудника).Имя;
		|КонецФункции
		|
		|Функция ПолучитьДолжность(ИдСотрудника)
		|    Возврат Справочники.Сотрудники.НайтиПоКоду(ИдСотрудника).Должность;
		|КонецФункции
		|```
		|
		|**Example Method Name:** ""ПолучитьИмя""
		|
		|**Example Output:**
		|
		|{
		|  ""description"": ""Возвращает имя сотрудника по его идентификатору"",
		|  ""parameters"": [
		|    {
		|      ""name"": ""ИдСотрудника"",
		|      ""type"": ""Строка"",
		|      ""descr"": ""Идентификатор сотрудника""
		|    }
		|  ],
		|  ""return_descr"": ""Строка - Имя сотрудника""
		|}
		|
		|# Notes
		|
		|- Ensure accuracy in describing the method's function, parameters, and return values.
		|- Handle any edge cases such as optional parameters or lack of return values gracefully.
		|- Descriptions are in Russian.
		|
		|# Context
		|
		|<knowladge>
		|" + ДопИнфоКонтекст + "
		|</knowladge>
		|
		|# Code to Analyze:
		|```1C
		|" + ТекстМодуля + "
		|```
		|
		|**Method Name:** " + ИмяМетода;
	
	Возврат ТекстПромпта;

КонецФункции

// Формирует промпт для документирования метода на основе его кода и дополнительного контекста.
// 
// Параметры:
//  КодМетода       - Строка - Код метода, который необходимо документировать.
//  ДопИнфоКонтекст - Строка - Дополнительный контекст, который может быть полезен для документирования метода.
// 
// Возвращаемое значение:
// Строка - Сформированный промпт для документирования метода.
Функция СформироватьПромптДляДокументированияАнализируяТолькоМетод(КодМетода, ДопИнфоКонтекст = "") Экспорт

	ТекстПромпта = 
		"Analyze the provided 1C method code and generate documentation in JSON format.
		|
		|- Extract the method's purpose and provide a clear description.
		|- Identify and list each parameter by name, specifying its type and description.
		|- Determine the return value and describe it, including its type.
		|
		|# Steps
		|
		|1. **Extract Description**: Understand the functionality and purpose of the method from the code.
		|2. **Identify Parameters**: Identify the parameters used in the method, detailing their name, type, and purpose.
		|3. **Determine Return Value**: Examine the method to understand what it returns, noting the type and a brief description.
		|
		|# Output Format
		|
		|Provide a JSON object in the following format:
		|```json
		|{
		|  ""description"": ""<описание назначения метода>"",
		|  ""parameters"": [
		|    {
		|      ""name"": ""<имя параметра 1>"",
		|      ""type"": ""<тип параметра 1>"",
		|      ""descr"": ""<описание параметра 1>""
		|    },
		|    {
		|      ""name"": ""<имя параметра 2>"",
		|      ""type"": ""<тип параметра 2>"",
		|      ""descr"": ""<описание параметра 2>""
		|    }
		|  ],
		|  ""return_descr"": ""<описание возвращаемого значения в формате Тип - Описание, максимум 100 символов>""
		|}
		|```
		|
		|# Examples
		|
		|**Example Input:**
		|```1C
		|&НаСервере
		|Функция ПолучитьИмя(ИдСотрудника)
		|Возврат Справочники.Сотрудники.НайтиПоКоду(ИдСотрудника).Имя;
		|КонецФункции
		|```
		|
		|**Example Output:**
		|```json
		|{
		|  ""description"": ""Возвращает имя сотрудника по его идентификатору"",
		|  ""parameters"": [
		|    {
		|      ""name"": ""ИдСотрудника"",
		|      ""type"": ""Строка"",
		|      ""descr"": ""Идентификатор сотрудника""
		|    }
		|  ],
		|  ""return_descr"": ""Строка - Имя сотрудника""
		|}
		|```
		|
		|# Notes
		|
		|- Ensure accuracy in describing the method's function, parameters, and return values.
		|- Handle any edge cases such as optional parameters or lack of return values gracefully.
		|- Descriptions are in Russian.
		|
		|# Context
		|
		|<knowladge>
		|" + ДопИнфоКонтекст + "
		|</knowladge>
		|
		|# Code to Analyze:
		|```1C
		|" + КодМетода + "
		|```";
	
	Возврат ТекстПромпта;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РазобратьОтветДокументирования(ОтветМоделиСтр)

	Попытка
		СтруктураОписания = ОМ_КлиентИИ.JSONВСтруктуру(ОтветМоделиСтр);
		Возврат СтруктураОписания;
	Исключение
		ВызватьИсключение "Неправильный формат ответа от модели, не удалось разобрать JSON: " + ОписаниеОшибки();
	КонецПопытки;

КонецФункции

#КонецОбласти

