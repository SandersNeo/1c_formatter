
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АдресДереваСтруктурыМодуля = Неопределено;
	Если Параметры.Свойство("АдресДереваСтруктурыМодуля", АдресДереваСтруктурыМодуля) Тогда
		дзМодуль = ПолучитьИзВременногоХранилища(АдресДереваСтруктурыМодуля);
		Параметры.Свойство("ИмяМетодаДляОписания", ИмяМетодаДляОписания);
		Параметры.Свойство("ТипОписания", ТипОписания);
		
		ВыполнитьАнализМодуля(дзМодуль);
	КонецЕсли;

	Элементы.Модель.СписокВыбора.Добавить("gpt-4o"); 
	Элементы.Модель.СписокВыбора.Добавить("gpt-4-turbo-2024-04-09");
	Элементы.Модель.СписокВыбора.Добавить("gpt-4-turbo-preview");
	Элементы.Модель.СписокВыбора.Добавить("gpt-3.5-turbo");
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьАнализМодуля(дзМодуль)

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");

	// Создаем структуру методов (со ссылками на строки ДЗ)
	СтруктураМетодов = ОбработкаОбъект.СтруктураМетодовМодуля(дзМодуль);
	
	// Генерируем текст модуля
    СоотвТекстыМодулей = ОбработкаОбъект.ГенерироватьТекстыМодулей(дзМодуль);
	ТекстМодуля = СоотвТекстыМодулей.Получить(дзМодуль.Строки[0].Описание);
	
	// Выполняем анализ текста модуля (структура вызовов методов и т.д.)
	СтруктураАнализ = ОбработкаОбъект.АнализМодуля(ТекстМодуля);
	
	// Генерируем текст метода для описания
	ТекстКодаМетода = ОбработкаОбъект.ГенерироватьТекстМодуляРек(СтруктураМетодов[ИмяМетодаДляОписания]);
	
	// Заполняем таблицу вызовов
	СтруктураОбработанныеМетоды = Новый Структура;
	ЗаполнитьТаблицуВызовов(ИмяМетодаДляОписания, СтруктураАнализ.СтруктураМетодВызовы, СтруктураМетодов, ОбработкаОбъект, СтруктураОбработанныеМетоды);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуВызовов(ИмяМетода, СтруктураМетодВызовы, СтруктураМетодов, ОбработкаОбъект, СтруктураОбработанныеМетоды)
	
	Если СтруктураОбработанныеМетоды.Свойство(ИмяМетода) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОбработанныеМетоды.Вставить(ИмяМетода, Истина);
	
	Вызовы = Неопределено;
	Если СтруктураМетодВызовы.Свойство(ИмяМетода, Вызовы) Тогда
		Для каждого Вызов Из Вызовы Цикл
			Если Вызов.ТипВызова = "Локальный" Тогда

				Если СтруктураОбработанныеМетоды.Свойство(Вызов.ИмяВызываемогоМетода) Тогда
					Продолжить;
				КонецЕсли;
				
				СвязанныйМетод = СвязанныеМетоды.Добавить();
				СвязанныйМетод.Имя = Вызов.ИмяВызываемогоМетода;
				
				СтрДереваВызываемыйМетод = Неопределено;
				Если СтруктураМетодов.Свойство(Вызов.ИмяВызываемогоМетода, СтрДереваВызываемыйМетод) Тогда
					СвязанныйМетод.Описание = СтрДереваВызываемыйМетод.Содержимое.Комментарий;
					СвязанныйМетод.Текст = ОбработкаОбъект.ГенерироватьТекстМодуляРек(СтрДереваВызываемыйМетод);
				КонецЕсли;
				
				СвязанныйМетод.ВключаемВПромпт = Истина;
				
				ЗаполнитьТаблицуВызовов(Вызов.ИмяВызываемогоМетода, СтруктураМетодВызовы, СтруктураМетодов, ОбработкаОбъект, СтруктураОбработанныеМетоды);
			ИначеЕсли Вызов.ТипВызова = "ОбщийМодуль"
				ИЛИ Вызов.ТипВызова = "МодульМенеджера" Тогда
				СвязанныйМетод = СвязанныеМетоды.Добавить();
				СвязанныйМетод.Имя = Вызов.Модуль + "." + Вызов.ИмяВызываемогоМетода;
				СвязанныйМетод.ВключаемВПромпт = Ложь;
			КонецЕсли;
				
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура СформироватьПромпт()
    ТД = Новый ТекстовыйДокумент;
	
	Если ТипОписания = "Описание" Тогда
		ТД.ДобавитьСтроку(
			"Ты программист 1С. Анализируешь программный модуль. Ниже приведен код метода " + ИмяМетодаДляОписания + ", а также связанных "
			"с ним методов. Проанализируй код метода, связанные с ним методы и сформируй краткое описание метода " + ИмяМетодаДляОписания + ", "
			"без его имени, в одну строку - для чего предназначен, какие действия выполняет. Описание должно начинаться с глагола. "
			"Вот код:");
	ИначеЕсли ТипОписания = "ВозвращаемоеЗначение" Тогда
		ТД.ДобавитьСтроку(
			"Ты программист 1С. Анализируешь программный модуль. Ниже приведен код функции " + ИмяМетодаДляОписания + ", а также связанных "
			"с ней методов. Проанализируй код функции, связанные с ним методы и сформируй краткое описание возвращаемого результата функции " + ИмяМетодаДляОписания + ", "
			"без ее имени, в одну строку. Формат: ""<тип> - <описание результата>"". "
			"Вот код:");
	ИначеЕсли ТипОписания = "Параметры" Тогда
		ТД.ДобавитьСтроку(
			"Ты программист 1С. Анализируешь программный модуль. Ниже приведен код метода " + ИмяМетодаДляОписания + ", а также связанных "
			"с ним методов. Проанализируй код метода, связанные с ним методы и сформируй описание параметров метода " + ИмяМетодаДляОписания + ", "
			"Описание должно быть в формате JSON:
			|[
			|{
			|name:""<имя параметра 1>""
			|type:""<тип параметра 1>""
			|descr:""<описание параметра 1>""
			|},
			|{
			|name:""<имя параметра 2>""
			|type:""<тип параметра 2>""
			|descr:""<описание параметра 2>""
			|},
			|...
			|]"
			"Вот код:"
			"Вот код:");
	КонецЕсли;
	
	ТД.ДобавитьСтроку(ТекстКодаМетода);
	
	Для каждого Вызовы Из СвязанныеМетоды Цикл
		Если Вызовы.ВключаемВПромпт 
			И ЗначениеЗаполнено(Вызовы.Текст) Тогда
			ТД.ДобавитьСтроку(Вызовы.Текст);
		КонецЕсли;
	КонецЦикла;

	Промпт = ТД.ПолучитьТекст();	
	
КонецПроцедуры



&НаСервереБезКонтекста
Функция ОтправитьЗапросВЧатГПТ(Промпт, Модель = Неопределено)
	
	ЧатГПТ = Обработки.Интеграция1С_И_ЧатGPT.Создать();
	ЧатГПТ.ЗаполнитьНастройкиПоУмолчанию();
	Если ЗначениеЗаполнено(Модель) Тогда
		ЧатГПТ.model = Модель;
	КонецЕсли;
	ЧатГПТ.НеСохранятьДиалог = Истина;
	ЧатГПТ.ТекстЗапроса = Промпт;
	ЧатГПТ.ОтправитьЗапрос();
	
	СтруктураОтвета = Новый Структура(
		"ЕстьОшибка, ТекстОтвета, ОбщееКоличествоТокенов",
		ЧатГПТ.Ответ_Ошибка,
		ЧатГПТ.Ответ_Текст,
		ЧатГПТ.Ответ_total_tokens);
		
	Возврат СтруктураОтвета;
	
КонецФункции

&НаКлиенте
Процедура Далее(Команда)
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаНастройки Тогда
		СформироватьПромпт();
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПромпт;
		Элементы.ФормаДалее.Заголовок = "Завершить";
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПромпт Тогда
		Закрыть(Ответ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПромпт Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаНастройки;
		Элементы.ФормаДалее.Заголовок = "Далее";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПромпт(Команда)
	Результат = ОтправитьЗапросВЧатГПТ(Промпт, Модель);
	Если Результат.ЕстьОшибка Тогда
		Сообщить(Результат.ТекстОтвета);
	Иначе
		Ответ = Результат.ТекстОтвета;
	КонецЕсли;
КонецПроцедуры


