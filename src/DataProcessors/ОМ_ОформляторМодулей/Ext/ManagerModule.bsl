#Область ПрограммныйИнтерфейс

// Разбирает текст модуля в дерево значений, представляющее структуру модуля.
// 
// Параметры:
//  ТекстМодуля - Строка - Текст модуля для разбора
//  ИмяМодуля   - Строка - Имя разбираемого модуля (опционально)
// 
// Возвращаемое значение:
//  Дерево значений - Дерево структуры модуля
Функция РазобратьТекстВДеревоМодуля(Знач ТекстМодуля, ИмяМодуля = Неопределено) Экспорт
	Возврат ОбработкаРазбораМодулей().РазобратьТекстВДеревоМодуля(ТекстМодуля, ИмяМодуля);
КонецФункции

// Выполняет анализ текста модуля, извлечение вызовов, используемых полей, создаваемых объектов
// 
// Параметры:
//  ТекстМодуля      - Строка    - Текст для анализа модуля
//  ПараметрыАнализа - Структура - Настройки контекста анализа
// 									*СтруктураОбщиеМодули - ключ - имя модуля, значение - произвольное (можно тоже имя)
// 									*СтруктураМодулиМенеджера - структура структур, в структуре верхнего уровклю ключ - тип объекта метаданных (см. ИнициализироватьСтруктуруМенеджерыТиповМД()), значение - структура, где ключ - имя объекта метаданных
// 									*СтруктураДоступныеПоляМодуля - ключи - имя поля, значение - произвольное (может быть имя объекта метаданных - реквизит формы, объекта)
// 
// Возвращаемое значение:
//  Структура - Результаты анализа модуля. Ключи возвращаемой структуры:
//		*ТаблицаВызовы:
//			Тип: ТаблицаЗначений
//			Описание: Таблица, содержащая информацию о вызовах методов в анализируемом модуле. Колонки таблицы:
//				ИмяМетода: Имя метода, из которого происходит вызов.
//				ИмяМетодаВРЕГ: Имя метода в верхнем регистре.
//				ИмяВызываемогоМетода: Имя вызываемого метода.
//				ТипВызова: Тип вызова метода (например, "СтандартныйМетод", "Локальный", "ОбщийМодуль" и т.д.).
//				Модуль: Модуль, в котором находится вызываемый метод.
//		*ЛокМетодыИМетодыГдеОниВызываются:
//			Тип: Структура
//			Описание: Структура, содержащая информацию о вызовах локальных методов. Ключом является имя локального метода, а значением — массив имен методов, из которых он вызывается.
//		*МетодыИВызываемыеИмиМетоды:
//			Тип: Структура
//			Описание: Структура, содержащая информацию о вызовах методов. Ключом является имя метода, а значением — массив строк с информацией о вызовах.
//		*ТаблицаОбращенияКПолям:
//			Тип: ТаблицаЗначений
//			Описание: Таблица, содержащая информацию об обращениях к полям в анализируемом модуле. Колонки таблицы:
//				ИмяМетода: Имя метода, в котором происходит обращение к полю.
//				ИмяПоля: Имя поля, к которому происходит обращение.
//				Объект: Объект метаданных, к которому относится поле.
//		*ТаблицаСоздаваемыеОбъекты:
//			Тип: ТаблицаЗначений
//			Описание: Таблица, содержащая информацию о создаваемых объектах в анализируемом модуле. Колонки таблицы:
//				ИмяМетода: Имя метода, в котором создается объект.
//				ИдентификаторТипа: Идентификатор типа создаваемого объекта.
//				Параметр: Дополнительный параметр, связанный с создаваемым объектом (например, имя COM-объекта).
//
// Пример использования:
//	ПараметрыАнализа = Новый Структура;
//	ПараметрыАнализа.Вставить("СтруктураОбщиеМодули", Новый Структура("ОбщийМодуль1", "ОбщиеМодули.ОбщийМодуль1"));
//	ПараметрыАнализа.Вставить("СтруктураМодулиМенеджера", Новый Структура("Справочники", Новый Структура("Справочник1", "Справочник.Справочник1")));
//	ПараметрыАнализа.Вставить("СтруктураДоступныеПоляМодуля", Новый Структура("Поле1", "Форма"));
//	ПараметрыАнализа.Вставить("Модуль", "МодульОбъекта");
//
//	РезультатАнализа = Обработки.ОМ_ОформляторМодулей.АнализМодуля(ТекстМодуля, ПараметрыАнализа);
//
//	// Использование результатов
//	ТаблицаВызовов = РезультатАнализа.ТаблицаВызовы;
//	ЛокальныеМетоды = РезультатАнализа.ЛокМетодыИМетодыГдеОниВызываются;
//	ОбращенияКПолям = РезультатАнализа.ТаблицаОбращенияКПолям;
//	СоздаваемыеОбъекты = РезультатАнализа.ТаблицаСоздаваемыеОбъекты;
Функция АнализМодуля(ТекстМодуля, ПараметрыАнализа = Неопределено) Экспорт
	// Выполняем анализ текста модуля с плагином
	Парсер = Обработки.ОМ_Парсер_ПарсерВстроенногоЯзыка.Создать();	
	
	Парсер.СтрогийРежим = Истина;
	
	ОбработкаАнализМодуля = Обработки.ОМ_Парсер_ПлагинАнализМодуля.Создать();
	
	Плагины = Новый Массив;
	Плагины.Добавить(ОбработкаАнализМодуля);
	
	ПараметрыПлагинов = Новый Соответствие;
	ПараметрыПлагинов[ОбработкаАнализМодуля.ЭтотОбъект] = ПараметрыАнализа; //Новый Структура("Конфигурация", Неопределено);
	
	ГлобальноеОкружение = Обработки.ОМ_Парсер_ГлобальноеОкружение.Создать();
	Окружение = ГлобальноеОкружение.Создать(Парсер);
	
	Парсер.Пуск(ТекстМодуля, Плагины, ПараметрыПлагинов, Окружение);
	
	// Пакуем результат работы плагина в стуктуру результатов анализа
	ТаблицаВызовов = ОбработкаАнализМодуля.ТаблицаВызовов();
	ВызовыЛокальныхМетодов = ОбработкаАнализМодуля.ВызовыЛокальныхМетодов();
	СтруктураМетодВызовы = ОбработкаАнализМодуля.СтруктураМетодВызовы();
	ТаблицаОбращенияКПолям = ОбработкаАнализМодуля.ТаблицаОбращенияКПолям();
	ТаблицаСоздаваемыеОбъекты = ОбработкаАнализМодуля.ТаблицаСоздаваемыеОбъекты();
	
	Возврат Новый Структура(
		"ТаблицаВызовы,ЛокМетодыИМетодыГдеОниВызываются,МетодыИВызываемыеИмиМетоды,ТаблицаОбращенияКПолям,ТаблицаСоздаваемыеОбъекты",
		ТаблицаВызовов,
		ВызовыЛокальныхМетодов,
		СтруктураМетодВызовы,
		ТаблицаОбращенияКПолям,
		ТаблицаСоздаваемыеОбъекты);
КонецФункции

// Создает структуру всех методов из дерева структуры модуля
// 
// Параметры:
//  ДеревоСтруктурыМодуля - ДеревоЗначений - Дерево структуры модуля
// 
// Возвращаемое значение:
//  Структура - Структура содержащая методы модуля. Ключ - имя метода, значение - строка дерева структуры
Функция СтруктураМетодовМодуля(ДеревоСтруктурыМодуля) Экспорт
	СтруктураМетодов = Новый Структура;
	
	СтруктураМетодовМодуляРек(ДеревоСтруктурыМодуля.Строки, СтруктураМетодов);
	
	Возврат СтруктураМетодов;
КонецФункции

// Формирует структуру переменных из дерева структуры модуля
// 
// Параметры:
//  ДеревоСтруктурыМодуля - ДеревоЗначений - Дерево структуры модуля для анализа
// 
// Возвращаемое значение:
//  Структура - Структура всех переменных модуля.  Ключ - имя переменной, значение - строка дерева структуры
Функция СтруктураПеременныхМодуля(ДеревоСтруктурыМодуля) Экспорт
	СтруктураПеременные = Новый Структура;
	
	СтрокиПеременные = ДеревоСтруктурыМодуля.Строки.НайтиСтроки(
		Новый Структура("ТипЭлемента", "Переменная"),
		Истина);
	Для каждого СтрокаДереваПеременная Из СтрокиПеременные Цикл
		Для каждого СтрПеременная Из СтрокаДереваПеременная.Содержимое.ТаблицаПеременных Цикл
			СтруктураПеременные.Вставить(СтрПеременная.Имя, СтрокаДереваПеременная);
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтруктураПеременные;
КонецФункции

// Находит и возвращает первую выбранную строку из дерева структуры модуля (где в колонке Выбрана = Истина
// 
// Параметры:
//  ДеревоСтруктурыМодуля - ДеревоЗначений - Дерево, представляющее структуру модуля
// 
// Возвращаемое значение:
//  СтрокаДереваЗначений - Первая строка с выбранным элементом или Неопределено
Функция НайтиВыбраннуюСтроку(ДеревоСтруктурыМодуля) Экспорт
	НайденныеСтроки = ДеревоСтруктурыМодуля.Строки.НайтиСтроки(Новый Структура("Выбрана", Истина), Истина);
	Возврат ?(ЗначениеЗаполнено(НайденныеСтроки), НайденныеСтроки[0], Неопределено);
КонецФункции

// Находит и возвращает ссылку на строку, представляющую модуль, в иерархии которого находится тек. строка.
// 
// Параметры:
//  ТекущаяСтр - Объект типа строка дерева - Исходная строка для поиска модуля
// 
// Возвращаемое значение:
//  СтрокаДереваЗначений - Строка модуля, если найдена, иначе Неопределено
Функция НайтиСтрокуМодуля(Знач ТекущаяСтр) Экспорт
	Пока ТекущаяСтр <> Неопределено И ТекущаяСтр.ТипЭлемента <> "Модуль" Цикл
		ТекущаяСтр = ТекущаяСтр.Родитель;
	КонецЦикла;
	
	Возврат ТекущаяСтр;
КонецФункции

// Ищет подчиненные строки определенного типа в дереве струтуры модуля
// 
// Параметры:
//  СтрокаДерева  - Структура - Строка дерева для поиска
//  ТипыЭлементов - Строка    - Перечисление типов элементов для поиска
// 
// Возвращаемое значение:
//  Массив - Подчиненные строки указанных типов
Функция НайтиПодчиненныеСтроки(СтрокаДерева, ТипыЭлементов) Экспорт
	МассивТипов = СтрРазделить(ТипыЭлементов, ",", Ложь);
	СтруктураТипов = Новый Структура;
	Для каждого Тип Из МассивТипов Цикл
		СтруктураТипов.Вставить(СокрЛП(Тип), Истина);
	КонецЦикла;
	
	Результат = Новый Массив;
	НайтиПодчиненныеСтрокиРек(СтрокаДерева.Строки, СтруктураТипов, Результат);
	
	Возврат Результат;
КонецФункции

#Область СтруктурыОписанияМодуля

// Создает и возвращает новое дерево значений для структуры модуля
// 
// Параметры:
// 
// 
// Возвращаемое значение:
//  ДеревоЗначений - Дерево значений с колонками для описания структуры модуля
Функция НовоеДеревоСтруктурыМодуля() Экспорт
	ДеревоМодуля = Новый ДеревоЗначений;
	ДеревоМодуля.Колонки.Добавить("ТипЭлемента");
	ДеревоМодуля.Колонки.Добавить("Описание");
	ДеревоМодуля.Колонки.Добавить("Содержимое");
	
	Возврат ДеревоМодуля;
КонецФункции

// Создает и возвращает структуру описания модуля с именем и синтаксисом.
// 
// Параметры:
// 
// 
// Возвращаемое значение:
//  Структура - Структура с полями имя и синтаксис
Функция МодульСтруктураОписания() Экспорт
	Возврат Новый Структура("Имя,Синтаксис");
КонецФункции

// Создает и возвращает структуру описания области модуля.
// 
// Параметры:
// 
// 
// Возвращаемое значение:
//  Структура - Описание области с именем и комментариями
Функция ОбластьСтруктураОписания() Экспорт
	Возврат Новый Структура("Имя, Комментарий, КомментарийВСтрокеОбласть, КомментарийПослеКонецОбласти");
КонецФункции

// Создает и возвращает структуру описания переменной модуля.
// 
// Параметры:
// 
// 
// Возвращаемое значение:
//  Структура - Описание переменной с инициализированными полями.
Функция ПеременнаяСтруктураОписания() Экспорт
	Структ = Новый Структура("ТаблицаПеременных, Контекст, Комментарий, КомментарийОднострочный, ИнструкцииПрепроцессора");
	Структ.ТаблицаПеременных = НоваяТаблицаПеременных();
	Структ.ИнструкцииПрепроцессора = СтруктураИнструкцийПрепроцессораПоУмолчанию();
	Возврат Структ;
КонецФункции

// Создает и возвращает структуру описания метода
// 
// Параметры:
// 
// 
// Возвращаемое значение:
//  Структура - Описание характеристик метода
Функция МетодСтруктураОписания() Экспорт
	Структ = Новый Структура(
		"Имя, Контекст, Комментарий, КомментарийОднострочный, КомментарийОднострочныйКонец, КомментарийВозвращаемоеЗначение, 
		|Параметры, Экспортная, Асинх, Тело, Аннотация, ИмяРасширяемогоМетода, ЭтоФункция, 
		|ИнструкцииПрепроцессора");
	Структ.Параметры = НоваяТаблицаПараметров();
	Структ.ИнструкцииПрепроцессора = СтруктураИнструкцийПрепроцессораПоУмолчанию();
	Возврат Структ;
КонецФункции

// Создает и возвращает структуру для описания элемента с типом 'Комментарий'.
// 
// Параметры:
// 
// 
// Возвращаемое значение:
//  Структура - Описание элемента типа 'Комментарий'.
Функция КомментарийСтруктураОписания() Экспорт
	Возврат Новый Структура("Комментарий");
КонецФункции

// Создает и возвращает структуру описания элемента типа 'Код'.
// 
// Параметры:
// 
// 
// Возвращаемое значение:
//  Структура - Описание элемента кода с телом и инструкциями препроцессора
Функция КодСтруктураОписания() Экспорт
	Структ = Новый Структура("Тело, ИнструкцииПрепроцессора");
	Структ.ИнструкцииПрепроцессора = СтруктураИнструкцийПрепроцессораПоУмолчанию();
	Возврат Структ;
КонецФункции

// Возвращает структуру описания элемента модуля по его типу
// 
// Параметры:
//  ТипЭлемента - Строка - Тип элемента модуля
// 
// Возвращаемое значение:
//  Структура - Описание элемента модуля в зависимости от его типа
Функция СтруктураОписанияЭлемента(ТипЭлемента) Экспорт
	Результат = Неопределено;
	Если ТипЭлемента = "Модуль" Тогда
		Результат = МодульСтруктураОписания();
	ИначеЕсли ТипЭлемента = "Область" Тогда
		Результат = ОбластьСтруктураОписания();
	ИначеЕсли ТипЭлемента = "Переменная" Тогда
		Результат = ПеременнаяСтруктураОписания();
	ИначеЕсли ТипЭлемента = "Процедура"
		ИЛИ ТипЭлемента = "Функция" Тогда
		Результат = МетодСтруктураОписания();
	ИначеЕсли ТипЭлемента = "Комментарий" Тогда
		Результат = КомментарийСтруктураОписания();
	ИначеЕсли ТипЭлемента = "Код" Тогда
		Результат = КодСтруктураОписания();
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Создает и возвращает структуру с инструкциями препроцессора по умолчанию.
// 
// Параметры:
// 
// 
// Возвращаемое значение:
//  Структура - Содержит настройки инструкций препроцессора.
Функция СтруктураИнструкцийПрепроцессораПоУмолчанию() Экспорт
	Возврат Новый Структура(
		"Клиент,Сервер,ТонкийКлиент,ВебКлиент,
		|МобильныйАвтономныйСервер,МобильноеПриложениеКлиент,МобильноеПриложениеСервер,МобильныйКлиент,
		|ТолстыйКлиентОбычноеПриложение,ТолстыйКлиентУправляемоеПриложение,
		|ВнешнееСоединение", //НаКлиенте,НаСервере
		Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина);
КонецФункции

// Создает и возвращает новую таблицу для параметров функции или процедуры
// 
// Параметры:
// 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Новая таблица с определенными колонками для параметров
Функция НоваяТаблицаПараметров() Экспорт
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("Имя");
	ТаблицаПараметров.Колонки.Добавить("Тип");
	ТаблицаПараметров.Колонки.Добавить("ЗначениеПоУмолчанию");
	ТаблицаПараметров.Колонки.Добавить("ПоЗначению");
	ТаблицаПараметров.Колонки.Добавить("Описание");
	
	Возврат ТаблицаПараметров;
КонецФункции

// Создает и возвращает новую таблицу переменных.
// 
// Параметры:
// 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с колонками для переменных
Функция НоваяТаблицаПеременных() Экспорт
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("Имя");
	ТаблицаПараметров.Колонки.Добавить("Экспорт");
	
	Возврат ТаблицаПараметров;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СтруктураМетодовМодуляРек(СтрокиДерева, СтроктураМетодов)
	Для каждого Стр Из СтрокиДерева Цикл
		Если Стр.ТипЭлемента = "Процедура"
			ИЛИ Стр.ТипЭлемента = "Функция" Тогда
			
			СтроктураМетодов.Вставить(Стр.Содержимое.Имя, Стр);
		ИначеЕсли Стр.ТипЭлемента = "Модуль"
			ИЛИ Стр.ТипЭлемента = "Область" Тогда
			СтруктураМетодовМодуляРек(Стр.Строки, СтроктураМетодов);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

Процедура НайтиПодчиненныеСтрокиРек(СтрокиДерева, СтруктураТипов, Результат)
	Для каждого Стр Из СтрокиДерева Цикл
		Если СтруктураТипов.Свойство(Стр.ТипЭлемента) Тогда
			Результат.Добавить(Стр);
		КонецЕсли;
		
		НайтиПодчиненныеСтрокиРек(Стр.Строки, СтруктураТипов, Результат);
	КонецЦикла;
КонецПроцедуры

Функция ОбработкаРазбораМодулей()
	Возврат Обработки.ОМ_ОформляторМодулей.Создать();
КонецФункции

#КонецОбласти

