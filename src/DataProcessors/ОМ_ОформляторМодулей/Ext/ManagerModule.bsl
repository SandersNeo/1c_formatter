
#Область ПрограммныйИнтерфейс

Функция АнализМодуля(ТекстМодуля, ПараметрыАнализа = Неопределено) Экспорт
	// Выполняем анализ текста модуля с плагином
	Парсер = Обработки.ОМ_Парсер_ПарсерВстроенногоЯзыка.Создать();	

	Парсер.СтрогийРежим = Истина;
	
	ОбработкаАнализМодуля = Обработки.ОМ_Парсер_ПлагинАнализМодуля.Создать();
	
	Плагины = Новый Массив;
	Плагины.Добавить(ОбработкаАнализМодуля);

	ПараметрыПлагинов = Новый Соответствие;
	ПараметрыПлагинов[ОбработкаАнализМодуля.ЭтотОбъект] = ПараметрыАнализа; //Новый Структура("Конфигурация", Неопределено);
	
	ГлобальноеОкружение = Обработки.ОМ_Парсер_ГлобальноеОкружение.Создать();
	Окружение = ГлобальноеОкружение.Создать(Парсер);
	
	Парсер.Пуск(ТекстМодуля, Плагины, ПараметрыПлагинов, Окружение);
	
	// Пакуем результат работы плагина в стуктуру результатов анализа
	ТаблицаВызовов = ОбработкаАнализМодуля.ТаблицаВызовов();
	ВызовыЛокальныхМетодов = ОбработкаАнализМодуля.ВызовыЛокальныхМетодов();
	СтруктураМетодВызовы = ОбработкаАнализМодуля.СтруктураМетодВызовы();
	ТаблицаОбращенияКПолям = ОбработкаАнализМодуля.ТаблицаОбращенияКПолям();
	ТаблицаСоздаваемыеОбъекты = ОбработкаАнализМодуля.ТаблицаСоздаваемыеОбъекты();
	
	Возврат Новый Структура(
		"ТаблицаВызовов,ВызовыЛокальныхМетодов,СтруктураМетодВызовы,ТаблицаОбращенияКПолям,ТаблицаСоздаваемыеОбъекты",
		ТаблицаВызовов,
		ВызовыЛокальныхМетодов,
		СтруктураМетодВызовы,
		ТаблицаОбращенияКПолям,
		ТаблицаСоздаваемыеОбъекты);
КонецФункции

Функция СтруктураМетодовМодуля(ДеревоСтруктурыМодуля) Экспорт

    СтруктураМетодов = Новый Структура;
	
	СтруктураМетодовМодуляРек(ДеревоСтруктурыМодуля.Строки, СтруктураМетодов);
	
	Возврат СтруктураМетодов;
	
КонецФункции

#Область СтруктурыОписанияМодуля

Функция НовоеДеревоСтруктурыМодуля() Экспорт
	
	ДеревоМодуля = Новый ДеревоЗначений;
	ДеревоМодуля.Колонки.Добавить("ТипЭлемента");
	ДеревоМодуля.Колонки.Добавить("Описание");
	ДеревоМодуля.Колонки.Добавить("Содержимое");

	Возврат ДеревоМодуля;

КонецФункции

Функция МодульСтруктураОписания() Экспорт
	Возврат Новый Структура("Имя,Синтаксис");
КонецФункции

Функция ОбластьСтруктураОписания() Экспорт
	Возврат Новый Структура("Имя, Комментарий, КомментарийВСтрокеОбласть, КомментарийПослеКонецОбласти");
КонецФункции

Функция ПеременнаяСтруктураОписания() Экспорт
	Структ = Новый Структура("ТаблицаПеременных, Контекст, Комментарий, КомментарийОднострочный, ИнструкцииПрепроцессора");
	Структ.ТаблицаПеременных = НоваяТаблицаПеременных();
	Структ.ИнструкцииПрепроцессора = СтруктураИнструкцийПрепроцессораПоУмолчанию();
	Возврат Структ;
КонецФункции

Функция МетодСтруктураОписания() Экспорт
	Структ = Новый Структура(
		"Имя, Контекст, Комментарий, КомментарийОднострочный, КомментарийОднострочныйКонец, КомментарийВозвращаемоеЗначение, 
		|Параметры, Экспортная, Асинх, Тело, Аннотация, ИмяРасширяемогоМетода, ЭтоФункция, 
		|ИнструкцииПрепроцессора");
	Структ.Параметры = НоваяТаблицаПараметров();
	Структ.ИнструкцииПрепроцессора = СтруктураИнструкцийПрепроцессораПоУмолчанию();
	Возврат Структ;
КонецФункции

Функция КомментарийСтруктураОписания() Экспорт
	Возврат Новый Структура("Комментарий");
КонецФункции

Функция КодСтруктураОписания() Экспорт
	Структ = Новый Структура("Тело, ИнструкцииПрепроцессора");
	Структ.ИнструкцииПрепроцессора = СтруктураИнструкцийПрепроцессораПоУмолчанию();
	Возврат Структ;
КонецФункции

Функция СтруктураОписанияЭлемента(ТипЭлемента) Экспорт
    Результат = Неопределено;
	Если ТипЭлемента = "Модуль" Тогда
		Результат = МодульСтруктураОписания();
	ИначеЕсли ТипЭлемента = "Область" Тогда
		Результат = ОбластьСтруктураОписания();
	ИначеЕсли ТипЭлемента = "Переменная" Тогда
		Результат = ПеременнаяСтруктураОписания();
	ИначеЕсли ТипЭлемента = "Процедура"
		ИЛИ ТипЭлемента = "Функция" Тогда
		Результат = МетодСтруктураОписания();
	ИначеЕсли ТипЭлемента = "Комментарий" Тогда
		Результат = КомментарийСтруктураОписания();
	ИначеЕсли ТипЭлемента = "Код" Тогда
		Результат = КодСтруктураОписания();
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция СтруктураИнструкцийПрепроцессораПоУмолчанию() Экспорт
	Возврат Новый Структура(
		"Клиент,Сервер,ТонкийКлиент,ВебКлиент,
		|МобильныйАвтономныйСервер,МобильноеПриложениеКлиент,МобильноеПриложениеСервер,МобильныйКлиент,
		|ТолстыйКлиентОбычноеПриложение,ТолстыйКлиентУправляемоеПриложение,
		|ВнешнееСоединение", //НаКлиенте,НаСервере
		Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина);
КонецФункции

Функция НоваяТаблицаПараметров() Экспорт
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("Имя");
	ТаблицаПараметров.Колонки.Добавить("Тип");
	ТаблицаПараметров.Колонки.Добавить("ЗначениеПоУмолчанию");
	ТаблицаПараметров.Колонки.Добавить("ПоЗначению");
	ТаблицаПараметров.Колонки.Добавить("Описание");

	Возврат ТаблицаПараметров;
	
КонецФункции

Функция НоваяТаблицаПеременных() Экспорт
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("Имя");
	ТаблицаПараметров.Колонки.Добавить("Экспорт");

	Возврат ТаблицаПараметров;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СтруктураМетодовМодуляРек(СтрокиДерева, СтроктураМетодов)
	Для каждого Стр Из СтрокиДерева Цикл
		Если Стр.ТипЭлемента = "Процедура"
			ИЛИ Стр.ТипЭлемента = "Функция" Тогда
			
			СтроктураМетодов.Вставить(Стр.Содержимое.Имя, Стр);
		ИначеЕсли Стр.ТипЭлемента = "Модуль"
			ИЛИ Стр.ТипЭлемента = "Область" Тогда
			СтруктураМетодовМодуляРек(Стр.Строки, СтроктураМетодов);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

