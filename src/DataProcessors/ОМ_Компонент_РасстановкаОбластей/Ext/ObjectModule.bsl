#Область ОписаниеПеременных

Перем АнглСинтаксис;

Перем ТекущийМодуль;

Перем СтруктураОбработчикиОповещения;

Перем ЭтоМодульФормыКоманды;

Перем ТабСоответствиеИменМетодовИОбластей;

Перем СоответствиеТаблицИОбластей;

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция ДеревоСтруктурыМодулейСоСтандартнымиОбластями(ДеревоСтруктуры) Экспорт
	НовоеДеревоСтруктуры = Обработки.ОМ_ОформляторМодулей.НовоеДеревоСтруктурыМодуля();
	
	Для каждого СтрМодуль Из ДеревоСтруктуры.Строки Цикл
		СтрНовыйМодуль = НовоеДеревоСтруктуры.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрНовыйМодуль, СтрМодуль);
	
		ЗаполнитьМодульСоСтандартнымиОбластями(СтрМодуль, СтрНовыйМодуль);
	КонецЦикла;
	
	Возврат НовоеДеревоСтруктуры;
КонецФункции

Процедура ЗаполнитьМодульСоСтандартнымиОбластями(СтрМодуль, СтрНовыйМодуль) Экспорт
	ТекущийМодуль = СтрМодуль;
	СтруктураОбработчикиОповещения = Неопределено;
	СоответствиеТаблицИОбластей = Новый Соответствие;

	АнглСинтаксис = (СтрМодуль.Содержимое.Синтаксис = "Английский");

	ЗаполнитьЗначенияСвойств(СтрНовыйМодуль, СтрМодуль);
	
	ЭтоМодульФормыКоманды = ЭтоМодульФормыКоманды(СтрМодуль);
	
	ТаблицаЭлементовСоСтандартнымиОбластямиИПорядком = НоваяТаблицаЭлементовСоСтандартнымиОбластямиИПорядком();
	ЗаполнитьТаблицуЭлементовСоСтандартнымиОбластямиИПорядкомРек(ТаблицаЭлементовСоСтандартнымиОбластямиИПорядком, СтрМодуль);
	
	СкорректироватьОбластиОбработчиковЭлементовФормы(ТаблицаЭлементовСоСтандартнымиОбластямиИПорядком);
	
	ТаблицаЭлементовСоСтандартнымиОбластямиИПорядком.Сортировать("ПорядокОбласти,ДопПорядок,ПорядокПодпрограммы");
	
	ТаблицаОбластей = ТаблицаЭлементовСоСтандартнымиОбластямиИПорядком.Скопировать(, "ИмяОбласти,ПорядокОбласти");
	ТаблицаОбластей.Свернуть("ИмяОбласти,ПорядокОбласти");
	
	Для каждого СтрТаблицыОбластей Из ТаблицаОбластей Цикл
		
		ИмяОбласти = СтрТаблицыОбластей.ИмяОбласти;
		Если ЗначениеЗаполнено(ИмяОбласти) Тогда
			СтрОбласть = НайтиИлиДобавитьОбласть(СтрНовыйМодуль, ИмяОбласти);
		Иначе
			СтрОбласть = СтрНовыйМодуль; // Если область определить не удалось - помещаем в модуль (для ручного определения областей)
		КонецЕсли;	
		
		ЭлементыОбласти = ТаблицаЭлементовСоСтандартнымиОбластямиИПорядком.НайтиСтроки(
			Новый Структура(
				"ИмяОбласти,ПорядокОбласти", 
				ИмяОбласти,
				СтрТаблицыОбластей.ПорядокОбласти));
		
		Для каждого СтрокаТаблицыЭлементовОбласти Из ЭлементыОбласти Цикл
			НовыйЭлемент = СтрОбласть.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтрокаТаблицыЭлементовОбласти.ЭлементСтруктуры);
			
			//СтрокаТаблицыЭлементовОбласти.ЭлементСтруктуры.Родитель.Строки.Удалить(СтрокаТаблицыЭлементовОбласти.ЭлементСтруктуры);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры
	
#КонецОбласти 

#Область РасстановкаОбластей

Функция НоваяТаблицаЭлементовСоСтандартнымиОбластямиИПорядком()
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ЭлементСтруктуры");
	Таблица.Колонки.Добавить("ИмяОбласти");
	Таблица.Колонки.Добавить("ПорядокОбласти");
	Таблица.Колонки.Добавить("ПорядокПодпрограммы");
	Таблица.Колонки.Добавить("ДопПорядок");
	
	Возврат Таблица;
КонецФункции

Функция НайтиИлиДобавитьОбласть(СтрМодуль, ИмяОбласти)
	ИмяОбластиВРег = ВРег(ИмяОбласти);
	Для каждого Стр Из СтрМодуль.Строки Цикл
		
		Если Стр.ТипЭлемента = "Область"
			И ВРег(Стр.Содержимое.Имя) = ИмяОбластиВРег Тогда
			
			Возврат Стр;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НоваяСтрокаДерева = СтрМодуль.Строки.Добавить();
	НоваяСтрокаДерева.ТипЭлемента = "Область";
	НоваяСтрокаДерева.Описание = ИмяОбласти;
	НоваяСтрокаДерева.Содержимое = Обработки.ОМ_ОформляторМодулей.ОбластьСтруктураОписания();
	НоваяСтрокаДерева.Содержимое.Имя = ИмяОбласти;
	
	Возврат НоваяСтрокаДерева;
КонецФункции

Процедура ЗаполнитьТаблицуЭлементовСоСтандартнымиОбластямиИПорядкомРек(ТаблицаЭлементовСоСтандартнымиОбластямиИПорядком, СтрЭлемент)
	КудаОпределяемЭлемент = ПолучитьКудаОпределяемЭлемент(СтрЭлемент);
	Если КудаОпределяемЭлемент = Неопределено Тогда
		Для каждого СтрВложЭлемент Из СтрЭлемент.Строки Цикл
			ЗаполнитьТаблицуЭлементовСоСтандартнымиОбластямиИПорядкомРек(ТаблицаЭлементовСоСтандартнымиОбластямиИПорядком, СтрВложЭлемент);
		КонецЦикла;
	Иначе
		СтрокаТаблицыЭлементовСоСтандартнымиОбластямиИПорядком = ТаблицаЭлементовСоСтандартнымиОбластямиИПорядком.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыЭлементовСоСтандартнымиОбластямиИПорядком, КудаОпределяемЭлемент);

		// Сохраняем соответствие имени таблицы и имени её области
		Если СтрНачинаетсяС(КудаОпределяемЭлемент.ИмяОбласти, "ОбработчикиСобытийЭлементовТаблицыФормы") Тогда
			ИмяТаблицы = Сред(КудаОпределяемЭлемент.ИмяОбласти, СтрДлина("ОбработчикиСобытийЭлементовТаблицыФормы") + 1);
			СоответствиеТаблицИОбластей.Вставить(ИмяТаблицы, КудаОпределяемЭлемент.ИмяОбласти);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура СкорректироватьОбластиОбработчиковЭлементовФормы(ТаблицаЭлементовСоСтандартнымиОбластямиИПорядком)
    
    // Получаем все строки с обработчиками элементов формы
    СтрокиОбработчиков = ТаблицаЭлементовСоСтандартнымиОбластямиИПорядком.НайтиСтроки(
        Новый Структура("ИмяОбласти", "ОбработчикиСобытийЭлементовШапкиФормы"));
    
    // Если нет обработчиков элементов формы - выходим
    Если СтрокиОбработчиков.Количество() = 0 Тогда
        Возврат;
    КонецЕсли;
    
    // Создаем таблицу для сортировки ключей
    КлючиТаблиц = Новый ТаблицаЗначений;
    КлючиТаблиц.Колонки.Добавить("Ключ");
    КлючиТаблиц.Колонки.Добавить("Длина", Новый ОписаниеТипов("Число"));
    
    // Заполняем таблицу
    Для Каждого КлючИЗначение Из СоответствиеТаблицИОбластей Цикл
        СтрокаТаблицы = КлючиТаблиц.Добавить();
        СтрокаТаблицы.Ключ = КлючИЗначение.Ключ;
        СтрокаТаблицы.Длина = СтрДлина(КлючИЗначение.Ключ);
    КонецЦикла;
    
    // Сортируем по убыванию длины
    КлючиТаблиц.Сортировать("Длина УБЫВ");
    
    // Перебираем найденные обработчики
    ИндексСтроки = СтрокиОбработчиков.ВГраница();
    Пока ИндексСтроки >= 0 Цикл
        СтрокаТаблицы = СтрокиОбработчиков[ИндексСтроки];
        
        // Перебираем отсортированные ключи таблиц
        Для Каждого СтрокаКлюча Из КлючиТаблиц Цикл
            
            ИмяМетода = СтрокаТаблицы.ЭлементСтруктуры.Содержимое.Имя;
            
            // Если в имени метода найдено имя таблицы (без учета регистра)
            Если СтрНайти(ВРег(ИмяМетода), ВРег(СтрокаКлюча.Ключ)) > 0 Тогда
                
                // Подменяем область на область таблицы
                СтрокаТаблицы.ИмяОбласти = СоответствиеТаблицИОбластей[СтрокаКлюча.Ключ];
                
                // Устанавливаем порядок области для таблицы формы
                СтрокаТаблицы.ПорядокОбласти = ПолучитьПорядокОбластиПоТипуОбработчика("ТаблицаФормы");
                
                // Удаляем обработанную строку из массива
                СтрокиОбработчиков.Удалить(ИндексСтроки);
                
                // Прерываем поиск для текущего метода, т.к. уже нашли соответствие
                Прервать;
                
            КонецЕсли;
            
        КонецЦикла;
        
        ИндексСтроки = ИндексСтроки - 1;
    КонецЦикла;
	
КонецПроцедуры

Функция ЭтоМодульФормыКоманды(СтрЭлемент)
	Для каждого СтрЭлемент2 Из СтрЭлемент.Строки Цикл
		
		Если (СтрЭлемент2.ТипЭлемента = "Процедура"
				ИЛИ СтрЭлемент2.ТипЭлемента = "Функция")
			И ЗначениеЗаполнено(СтрЭлемент2.Содержимое.Контекст) Тогда
			Возврат Истина;
		ИначеЕсли СтрЭлемент2.ТипЭлемента = "Область" Тогда
			Если ЭтоМодульФормыКоманды(СтрЭлемент2) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция ПолучитьКудаОпределяемЭлемент(СтрЭлемент)
    КудаОпределяем = Неопределено;
    
    // Добавляем обработку комментариев в начало функции
    Если СтрЭлемент.ТипЭлемента = "Комментарий" Тогда
        КудаОпределяем = КудаОпределяемЭлемент(СтрЭлемент, "", 0, 0);
        
    ИначеЕсли СтрЭлемент.ТипЭлемента = "Переменная" Тогда
        КудаОпределяем = КудаОпределяемЭлемент(СтрЭлемент, "ОписаниеПеременных", 1);
        
    ИначеЕсли СтрЭлемент.ТипЭлемента = "Процедура" 
        ИЛИ СтрЭлемент.ТипЭлемента = "Функция" Тогда
        КудаОпределяем = КудаОпределяемМетод(СтрЭлемент);
        
    ИначеЕсли СтрЭлемент.ТипЭлемента = "Код" Тогда
        КудаОпределяем = КудаОпределяемКод(СтрЭлемент);
        
    КонецЕсли;
    
    Возврат КудаОпределяем;
КонецФункции

Функция КлючОбласти(ИмяОбласти)
	Если НЕ АнглСинтаксис Тогда
		Возврат ИмяОбласти;
	КонецЕсли;
	
	СоответствиеОбластей = Новый Соответствие;
	СоответствиеОбластей.Вставить("ПрограммныйИнтерфейс", "Public");
	СоответствиеОбластей.Вставить("СлужебныйПрограммныйИнтерфейс", "Internal");
	СоответствиеОбластей.Вставить("СлужебныеПроцедурыИФункции", "Private");
	СоответствиеОбластей.Вставить("ОбновлениеИнформационнойБазы", "InfobaseUpdate");
	СоответствиеОбластей.Вставить("ОписаниеПеременных", "Variables");
	СоответствиеОбластей.Вставить("Инициализация", "Initialize");
	СоответствиеОбластей.Вставить("ОбработчикиСобытийФормы", "FormEventHandlers");
	СоответствиеОбластей.Вставить("ОбработчикиСобытийЭлементовШапкиФормы", "FormHeaderItemsEventHandlers");
	СоответствиеОбластей.Вставить("ОбработчикиСобытийЭлементовТаблицыФормы", "FormTableItemsEventHandlers");
	СоответствиеОбластей.Вставить("ОбработчикиКомандФормы", "FormCommandsEventHandlers");
	СоответствиеОбластей.Вставить("ОбработчикиСобытий", "EventHandlers");
	
	ИмяОбластиНаАнглийском = СоответствиеОбластей[ИмяОбласти];
	
	Если ИмяОбластиНаАнглийском <> Неопределено Тогда
		Возврат ИмяОбластиНаАнглийском;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяОбласти, "ОбработчикиСобытийЭлементовТаблицыФормы") Тогда
		ИмяТаблицы = Сред(ИмяОбласти, СтрДлина("ОбработчикиСобытийЭлементовТаблицыФормы") + 1);
		Возврат "FormTableItemsEventHandlers" + ИмяТаблицы;
	КонецЕсли;
	
	Возврат ИмяОбласти;
КонецФункции

Функция КудаОпределяемЭлемент(ЭлементСтруктуры, ИмяОбласти, ПорядокОбласти, ПорядокПодпрограммы = 10000, ДопПорядок = "")
	Если ИмяОбласти = "ОбработчикиСобытийЭлементовТаблицыФормы" Тогда
		ИмяОбластиПолное = ИмяОбласти + ДопПорядок;
	Иначе
		ИмяОбластиПолное = ИмяОбласти;
	КонецЕсли;
	
	Возврат Новый Структура(
		"ЭлементСтруктуры, ИмяОбласти, ПорядокОбласти, ПорядокПодпрограммы, ДопПорядок", 
		ЭлементСтруктуры, КлючОбласти(ИмяОбластиПолное), ПорядокОбласти, ПорядокПодпрограммы, ДопПорядок);
КонецФункции

Функция КудаОпределяемМетод(СтрЭлемент)
	КудаОпределяем = Неопределено;
	
	// Проверяем особые случаи
	Если СтрЭлемент.Содержимое.Экспортная = Истина
		И Не ЭтоОбработчикОповещения(СтрЭлемент.Содержимое.Имя) Тогда
		КудаОпределяем = КудаОпределяемЭлемент(СтрЭлемент, "ПрограммныйИнтерфейс", 40, ВРег(СтрЭлемент.Содержимое.Имя));
		
	// Обработчики команд Формы 	
	ИначеЕсли ЗначениеЗаполнено(СтрЭлемент.Содержимое.Параметры)
			  И СтрЭлемент.Содержимое.Параметры.Количество() = 1
			  И ВРег(СтрЭлемент.Содержимое.Параметры[0].Имя) = "КОМАНДА" Тогда
			  
		КудаОпределяем = КудаОпределяемЭлемент(СтрЭлемент, "ОбработчикиКомандФормы", 250, 1);
		
	    // Все остальные случаи
	    Иначе
		// Получаем имя метода в верхнем регистре для сравнения
		Если ЗначениеЗаполнено(СтрЭлемент.Содержимое.ИмяРасширяемогоМетода) Тогда
			ИмяМетода = СтрЭлемент.Содержимое.ИмяРасширяемогоМетода;
		Иначе
			ИмяМетода = СтрЭлемент.Содержимое.Имя;
			ИмяМетодаВРег = ВРег(ИмяМетода);
			Если СтрЗаканчиваетсяНа(ИмяМетодаВРег, "ПЕРЕД")
				ИЛИ СтрЗаканчиваетсяНа(ИмяМетодаВРег, "ПОСЛЕ") Тогда
				ИмяМетода = Лев(ИмяМетода, СтрДлина(ИмяМетода)-5);
			КонецЕсли;
		КонецЕсли;
		ИмяМетодаВРег = ВРег(ИмяМетода);

		// Массив для хранения найденных вариантов соответствия
		НайденныеВарианты = Новый Массив;
		
		// Флаг, указывающий что найдено соответствие по английскому синтаксису
		НайденоПоАнглСинтаксису = Ложь;
		// Перебираем таблицу соответствия имен методов и областей
		Для Каждого Стр Из ТабСоответствиеИменМетодовИОбластей Цикл
			Если ЭтоМодульФормыКоманды // Для модуля формы актуальны только области модуля формы
				И Стр.ВФорме = "" Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЭтоМодульФормыКоманды
				И Стр.ВФорме <> "" Тогда
				Продолжить;
			КонецЕсли;
			
			// Проверяем соответствие по русскому имени
			Если СтрЗаканчиваетсяНа(ИмяМетодаВРег, Стр.Имя) Тогда
				НайденныеВарианты.Добавить(Стр);
			// Проверяем соответствие по английскому имени
			ИначеЕсли СтрЗаканчиваетсяНа(ИмяМетодаВРег, Стр.ИмяАнгл) Тогда
				НайденныеВарианты.Добавить(Стр);
				НайденоПоАнглСинтаксису = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// Если соответствий не найдено - помещаем в область служебных процедур
		Если НайденныеВарианты.Количество() = 0 Тогда
		КудаОпределяем = КудаОпределяемЭлемент(СтрЭлемент, "СлужебныеПроцедурыИФункции", 300, 1);
		Иначе
			// Если найден один вариант - используем его
			Если НайденныеВарианты.Количество() = 1 Тогда
				ДанныеОбласти = НайденныеВарианты[0];
			Иначе
				// Если найдено несколько вариантов - пытаемся разрешить неоднозначность
				ДанныеОбласти = РазрешитьНеоднозначности(СтрЭлемент.Содержимое, НайденныеВарианты, НайденоПоАнглСинтаксису);
			КонецЕсли;
	
			Если ДанныеОбласти = Неопределено Тогда
				// Если область определить не удалось - помещаем в модуль, без области (для ручного определения областей)
				КудаОпределяем = КудаОпределяемЭлемент(СтрЭлемент, "", 10, 0, ИмяМетодаВРег);
			Иначе
				// Определяем дополнительный порядок для сортировки
				ДопПорядок = "";
				// Для событий, связанных с элементом формы или таблицы используем имя метода без имени события
				Если ДанныеОбласти.ВФорме = "ЭлементФормы" 
					ИЛИ ДанныеОбласти.ВФорме = "ТаблицаФормы" Тогда
					ДлинаИмениСобытия = СтрДлина(?(НайденоПоАнглСинтаксису, ДанныеОбласти.ИмяАнгл, ДанныеОбласти.Имя));
					ДопПорядок = Лев(ИмяМетода, СтрДлина(ИмяМетода) - ДлинаИмениСобытия);
				КонецЕсли;
		
				// Формируем результат с учетом всех параметров
				ПорядокОбласти = ПолучитьПорядокОбластиПоТипуОбработчика(ДанныеОбласти.ВФорме);
				КудаОпределяем = КудаОпределяемЭлемент(СтрЭлемент, ДанныеОбласти.Область, ПорядокОбласти, ДанныеОбласти.ПорядокМетода, ДопПорядок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат КудаОпределяем;
КонецФункции

Функция РазрешитьНеоднозначности(СодержаниеМетода, НайденныеВарианты, НайденоПоАнглСинтаксису)
	ИмяСобытия = НайденныеВарианты[0].Имя;
	    
	    Если ИмяСобытия = "ОБРАБОТКАВЫБОРА" Тогда
	        Для каждого Вариант Из НайденныеВарианты Цикл
			Если Вариант.ВФорме = "Форма" Тогда
				Если СодержаниеМетода.Параметры.Количество() = 2 
					И ВРег(СодержаниеМетода.Параметры[1].Имя) = "ИСТОЧНИКВЫБОРА" Тогда
					Возврат Вариант;
				КонецЕсли;
			ИначеЕсли Вариант.ВФорме = "ТаблицаФормы" Тогда
				Если СодержаниеМетода.Параметры.Количество() = 3
					И ВРег(СодержаниеМетода.Параметры[2].Имя) = "СТАНДАРТНАЯОБРАБОТКА" Тогда
					Возврат Вариант;
				КонецЕсли;
			ИначеЕсли Вариант.ВФорме = "ЭлементФормы" Тогда
				Если СодержаниеМетода.Параметры.Количество() >= 4 Тогда
					Возврат Вариант;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ИмяСобытия = "ОБРАБОТКАЗАПИСИНОВОГО" Тогда
			Для каждого Вариант Из НайденныеВарианты Цикл
				Если Вариант.ВФорме = "Форма" Тогда
					Если СтрДлина(СодержаниеМетода.Имя) = СтрДлина(ИмяСобытия)
						ИЛИ Сред(СодержаниеМетода.Имя, СтрДлина(СодержаниеМетода.Имя) - СтрДлина(ИмяСобытия), 1) = "_" Тогда
						Возврат Вариант;
					КонецЕсли;
				ИначеЕсли Вариант.ВФорме = "ТаблицаФормы" Тогда
					Возврат Вариант; // пред. вариант не подошел, значит берем этот
				КонецЕсли;
			КонецЦикла;
	ИначеЕсли ИмяСобытия = "ПЕРЕДЗАПИСЬЮ" Тогда
		Для каждого Вариант Из НайденныеВарианты Цикл
			Если Вариант.ВФорме = "Форма" Тогда
				Если СодержаниеМетода.Параметры.Количество() = 2
					И ВРег(СодержаниеМетода.Параметры[1].Имя) = "ПАРАМЕТРЫЗАПИСИ" Тогда
					Возврат Вариант;
				КонецЕсли;
			ИначеЕсли Вариант.ВФорме = "ЭлементФормы" Тогда
				Возврат Вариант; // пред. вариант не подошел, значит берем этот
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ИмяСобытия = "ПОСЛЕЗАПИСИ" Тогда
		Для каждого Вариант Из НайденныеВарианты Цикл
			Если Вариант.ВФорме = "Форма" Тогда
				Если СодержаниеМетода.Параметры.Количество() = 1 
					И ВРег(СодержаниеМетода.Параметры[0].Имя) = "ПАРАМЕТРЫЗАПИСИ" Тогда
					Возврат Вариант;
				КонецЕсли;
			ИначеЕсли Вариант.ВФорме = "ЭлементФормы" Тогда
				Возврат Вариант; // пред. вариант не подошел, значит берем этот
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ИмяСобытия = "ПРИСОХРАНЕНИИПОЛЬЗОВАТЕЛЬСКИХНАСТРОЕКНАСЕРВЕРЕ" Тогда
		Для каждого Вариант Из НайденныеВарианты Цикл
			Если Вариант.ВФорме = "Форма" Тогда
				Если СодержаниеМетода.Параметры.Количество() = 1 Тогда
					Возврат Вариант;
				КонецЕсли;
			ИначеЕсли Вариант.ВФорме = "ТаблицаФормы" Тогда
				Возврат Вариант;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ИмяСобытия = "ПЕРЕДЗАГРУЗКОЙПОЛЬЗОВАТЕЛЬСКИХНАСТРОЕКНАСЕРВЕРЕ" Тогда
		Для каждого Вариант Из НайденныеВарианты Цикл
			Если Вариант.ВФорме = "Форма" Тогда
				Если СодержаниеМетода.Параметры.Количество() = 2 Тогда
					Возврат Вариант;
				КонецЕсли;
			ИначеЕсли Вариант.ВФорме = "ТаблицаФормы" Тогда
				Возврат Вариант;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ИмяСобытия = "ПРИОБНОВЛЕНИИСОСТАВАПОЛЬЗОВАТЕЛЬСКИХНАСТРОЕКНАСЕРВЕРЕ" Тогда
		Для каждого Вариант Из НайденныеВарианты Цикл
			Если Вариант.ВФорме = "Форма" Тогда
				Если СтрДлина(СодержаниеМетода.Имя) = СтрДлина(ИмяСобытия)
					ИЛИ Сред(СодержаниеМетода.Имя, СтрДлина(СодержаниеМетода.Имя) - СтрДлина(ИмяСобытия), 1) = "_" Тогда
					Возврат Вариант;
				КонецЕсли;
			ИначеЕсли Вариант.ВФорме = "ТаблицаФормы" Тогда
				Возврат Вариант; // пред. вариант не подошел, значит берем этот
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ИмяСобытия = "ОБРАБОТКАНАВИГАЦИОННОЙССЫЛКИ" Тогда
		Для каждого Вариант Из НайденныеВарианты Цикл
			Если Вариант.ВФорме = "Форма" Тогда
				Если СодержаниеМетода.Параметры.Количество() = 2 Тогда
					Возврат Вариант;
				КонецЕсли;
			ИначеЕсли Вариант.ВФорме = "ТаблицаФормы" Тогда
				Возврат Вариант;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ИмяСобытия = "ОБРАБОТКАПОЛУЧЕНИЯНАВИГАЦИОННОЙССЫЛКИ" Тогда
		Для каждого Вариант Из НайденныеВарианты Цикл
			Если Вариант.ВФорме = "Форма" Тогда
				Если СодержаниеМетода.Параметры.Количество() = 4 Тогда
					Возврат Вариант;
				КонецЕсли;
			ИначеЕсли Вариант.ВФорме = "ТаблицаФормы" Тогда
				Возврат Вариант;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ИмяСобытия = "ОБРАБОТКАПОЛУЧЕНИЯСПИСКАНАВИГАЦИОННЫХССЫЛОК" Тогда
		Для каждого Вариант Из НайденныеВарианты Цикл
			Если Вариант.ВФорме = "Форма" Тогда
				Если СодержаниеМетода.Параметры.Количество() = 2 Тогда
					Возврат Вариант;
				КонецЕсли;
			ИначеЕсли Вариант.ВФорме = "ТаблицаФормы" Тогда
				Возврат Вариант;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ИмяСобытия = "ВЫБОРЗНАЧЕНИЯ" Тогда
		Для каждого Вариант Из НайденныеВарианты Цикл
			Если Вариант.ВФорме = "Форма" Тогда
				Если СодержаниеМетода.Параметры.Количество() = 1 Тогда
					Возврат Вариант;
				КонецЕсли;
			ИначеЕсли Вариант.ВФорме = "ТаблицаФормы" Тогда
				Возврат Вариант;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ИмяСобытия = "ВЫБОР" Тогда
		ВариантДляЭлемента = Неопределено;
		Для каждого Вариант Из НайденныеВарианты Цикл
			Если Вариант.ВФорме = "ТаблицаФормы" Тогда
				Если СодержаниеМетода.Параметры.Количество() = 4 
					И ВРег(СодержаниеМетода.Параметры[1].Имя) = "ВЫБРАННАЯСТРОКА" Тогда
					Возврат Вариант;
				КонецЕсли;
			ИначеЕсли Вариант.ВФорме = "ЭлементФормы" Тогда
				ВариантДляЭлемента = Вариант;
			КонецЕсли;
		КонецЦикла;
		Возврат ВариантДляЭлемента;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ПрочитатьДанныеМакетаСоответствиеИменМетодовИОбластей()
	Макет = ПолучитьМакет("СоответствиеИменМетодовИОбластей");
	    
    ДанныеМакета = Новый ТаблицаЗначений;
    ДанныеМакета.Колонки.Добавить("Имя");
    ДанныеМакета.Колонки.Добавить("ИмяАнгл");
    ДанныеМакета.Колонки.Добавить("Область");
    ДанныеМакета.Колонки.Добавить("ВФорме");
    ДанныеМакета.Колонки.Добавить("ПорядокОбласти", Новый ОписаниеТипов("Число"));
    ДанныеМакета.Колонки.Добавить("ПорядокМетода", Новый ОписаниеТипов("Число"));
    
    Для НомерСтроки = 2 По Макет.ВысотаТаблицы Цикл
        
        ИмяМетода = СокрЛП(Макет.Область(НомерСтроки, 1).Текст);
        
        Если ПустаяСтрока(ИмяМетода) Тогда
            Продолжить;
        КонецЕсли;
        
        СтрокаМакета = ДанныеМакета.Добавить();
        СтрокаМакета.Имя = ИмяМетода;
        СтрокаМакета.ИмяАнгл = СокрЛП(Макет.Область(НомерСтроки, 2).Текст);
        СтрокаМакета.Область = СокрЛП(Макет.Область(НомерСтроки, 3).Текст);
        СтрокаМакета.ВФорме = СокрЛП(Макет.Область(НомерСтроки, 4).Текст);
        СтрокаМакета.ПорядокМетода = Число(СокрЛП(Макет.Область(НомерСтроки, 5).Текст));
        
    КонецЦикла;
    
    Возврат ДанныеМакета;
КонецФункции

Функция ПолучитьПорядокОбластиПоТипуОбработчика(ТипОбработчика)
	
	Если ТипОбработчика = "ЭлементФормы" Тогда
		Возврат 100;
	ИначеЕсли ТипОбработчика = "ТаблицаФормы" Тогда
		Возврат 150;
	Иначе // "Форма" или пустая строка
		Возврат 50;
	КонецЕсли;
	
КонецФункции

Функция ЭтоОбработчикОповещения(ИмяМетода)
	Если СтруктураОбработчикиОповещения = Неопределено Тогда
		ТекстМодуля = Обработки.ОМ_Компонент_ГенерацияТекстовМодулей.ТекстМодуля(ТекущийМодуль);
		АнализТекущегоМодуля = Обработки.ОМ_ОформляторМодулей.АнализМодуля(ТекстМодуля);
		
		СтруктураОбработчикиОповещения = Новый Структура;
		ВызовыОбработчиковОповещения = АнализТекущегоМодуля.ТаблицаВызовы.НайтиСтроки(
			Новый Структура("ТипВызова", "ОбработчикОповещения"));
		Для каждого СтрВызов Из ВызовыОбработчиковОповещения Цикл
			СтруктураОбработчикиОповещения.Вставить(СтрВызов.ИмяВызываемогоМетода, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураОбработчикиОповещения.Свойство(ИмяМетода);
КонецФункции

Функция ЭтоВызовИсключения(СтрЭлемент)
	Парсер = Обработки.ОМ_Парсер_ПарсерВстроенногоЯзыка.Создать();	

	Парсер.СтрогийРежим = Истина;
	АСД = Парсер.Разобрать(СтрЭлемент.Содержимое.Тело);

	Если АСД.Операторы.Количество() > 0
		И АСД.Операторы[0].Тип = "ОператорВызватьИсключение" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция КудаОпределяемКод(СтрЭлемент)
    // Проверяем, является ли код с "ВЫЗВАТЬИСКЛЮЧЕНИЕ"
    Если ЭтоВызовИсключения(СтрЭлемент) Тогда
        Возврат КудаОпределяемЭлемент(СтрЭлемент, "", 500);
    КонецЕсли;
    
    // Для остальных случаев используем стандартную область инициализации
    Возврат КудаОпределяемЭлемент(СтрЭлемент, "Инициализация", 350);
КонецФункции

#КонецОбласти

#Область Инициализация

ТабСоответствиеИменМетодовИОбластей = ПрочитатьДанныеМакетаСоответствиеИменМетодовИОбластей();

#КонецОбласти

