// Репозиторий проекта: 
// https://github.com/vladimir-kharin/1c_formatter
// 
// Харин Владимир (С) 2025. https://vharin.ru
// Telegram - https://t.me/vladimir_kharin

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("ПараметрыКоманды") Тогда
		АдресДереваСтруктурыМодулей = Параметры.ПараметрыКоманды.АдресДереваСтруктурыМодулей;
		дз = ПолучитьИзВременногоХранилища(АдресДереваСтруктурыМодулей);
		Если Параметры.ПараметрыКоманды.Идентификатор = "ОформлениеМетодаСНастройкой" Тогда
			дз.Колонки.Добавить("НомерСтрокиВМетодыКОформлению");
			
			ВыбраннаяСтрока = Обработки.ОМ_ОформляторМодулей.НайтиВыбраннуюСтроку(дз);
			
			МассивМетодов = Новый Массив;
			Если ВыбраннаяСтрока.ТипЭлемента = "Процедура" ИЛИ ВыбраннаяСтрока.ТипЭлемента = "Функция" Тогда
				МассивМетодов.Добавить(ВыбраннаяСтрока);
			ИначеЕсли ВыбраннаяСтрока.ТипЭлемента = "Область" ИЛИ ВыбраннаяСтрока.ТипЭлемента = "Модуль" Тогда
				МассивМетодов = Обработки.ОМ_ОформляторМодулей.НайтиПодчиненныеСтроки(ВыбраннаяСтрока, "Процедура,Функция");
			КонецЕсли;
			
			ОдинМетод = (МассивМетодов.Количество() = 1);
			
			НомерСтроки = 1;
			Для каждого СтрМетод Из МассивМетодов Цикл
				Метод = МетодыКОформлению.Добавить();
				ЗаполнитьЗначенияСвойств(Метод, СтрМетод.Содержимое, "Имя,ЭтоФункция,Тело");
				Метод.Пометка = Истина;
				Метод.НомерКартинки = ?(Метод.ЭтоФункция, 1, 0);
				
				СтрМетод.НомерСтрокиВМетодыКОформлению = НомерСтроки;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
	
			ПоместитьВоВременноеХранилище(дз, АдресДереваСтруктурыМодулей);
			
			// Устанавливаем текущую страницу в зависимости от количества методов
			Элементы.СтраницыОдинНесколько.ТекущаяСтраница = ?(ОдинМетод,
				Элементы.СтраницаОдинМетод,
				Элементы.СтраницаНесколькоМетодов);
				
			Если Не ЗначениеЗаполнено(ПравилаОформления) Тогда
				ПравилаОформления =
				"- Приведи написание ключевых слов и стандартных методов платформы к каноническому виду (если/ЕСЛИ -> Если, тогда/ТОГДА - > Тогда, и так далее).
				|- Оформи отступы. Стандартный отступ - одна табуляция. Если отступы сделаны пробелами - переделай на табуляции.
				|- В одной строке кода должно быть не более одного оператора.";
			КонецЕсли;
		КонецЕсли;
	Иначе
		ВызватьИсключение "В форму должен быть передан параметр ПараметрыКоманды.АдресДереваСтруктурыМодулей";
	КонецЕсли;
	
	ПроверитьКодПослеОформления = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.МетодыКОформлению.ТекущаяСтрока = МетодыКОформлению[0].ПолучитьИдентификатор();
	УстановитьВидимостьДоступностьЭлементовФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПроверитьКодПослеОформленияПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементовФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Оформить(Команда)
	Для каждого Метод Из МетодыКОформлению Цикл
		Если НЕ Метод.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ТелоОформленное = ОформитьТело(Метод);
		МетодОформлен = Истина;
		Если ПроверитьКодПослеОформления Тогда
			Если ЕстьСущественныеОтличияКодаПослеОформления(Метод.Тело, ТелоОформленное) Тогда
				СообщениеОбОшибке = СтрШаблон("Метод %1 не может быть оформлен. См. лог", Метод.Имя);

				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СообщениеОбОшибке;
				Сообщение.Сообщить();

				МетодОформлен = Ложь;
			Иначе
				Метод.ТелоОформленное = ТелоОформленное;
			КонецЕсли;
		Иначе
			Метод.ТелоОформленное = ТелоОформленное;
		КонецЕсли;

		Если МетодыКОформлению.Количество() > 1 
			И МетодОформлен Тогда
			Метод.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПринятьИЗакрыть(Команда)
	ПринятьИЗакрытьНаСервере();
	Закрыть(Новый Структура("АдресДереваСтруктурыМодулей", АдресДереваСтруктурыМодулей));
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	Для каждого МетодКОформлению Из МетодыКОформлению Цикл
		МетодКОформлению.Пометка = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	Для каждого МетодКОформлению Из МетодыКОформлению Цикл
		МетодКОформлению.Пометка = Ложь;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ОформитьТело(Метод)
	ТелоМетода = Метод.Тело;

	Попытка
		ПарсерКода = Обработки.ОМ_Парсер_ПарсерВстроенногоЯзыка.Создать();
		ТаблицаТокенов = ПарсерКода.Токенизировать(ТелоМетода);
	Исключение
		Возврат "Ошибка разбора кода: " + ОписаниеОшибки();
	КонецПопытки;



	Возврат Неопределено;
КонецФункции

&НаСервереБезКонтекста
Функция УпрощенноеДеревоРазбора(ТаблицаТокенов)
	МассивБлоков = Новый Массив;

	ВыделитьБлокиРекурсивно(ТаблицаТокенов, МассивБлоков);

	Возврат МассивБлоков;
КонецФункции

&НаСервереБезКонтекста
Функция ВыделитьБлокиРекурсивно(ТаблицаТокенов, МассивБлоков)
	Для каждого Токен Из ТаблицаТокенов Цикл
		Если Токен.Токен = "Метка" Тогда
			Блок = СоздатьБлокМетка(Токен);
			МассивБлоков.Добавить(Блок);
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьБлокМетка(Токен)
	Блок = Новый Структура("Тип", "Метка");
	Блок.Метка = Токен.Содержимое;
	Возврат Блок;
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементовФормы()
	Если ПроверитьКодПослеОформления Тогда
		Элементы.ПроверитьКодПослеОформления.ЦветТекстаЗаголовка = Элементы.Метод.ЦветТекстаЗаголовка;
		Элементы.ПравилаИзменения.Видимость = Ложь;
	Иначе
		Элементы.ПроверитьКодПослеОформления.ЦветТекстаЗаголовка = WebЦвета.Красный;
		Элементы.ПравилаИзменения.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьСущественныеОтличияКодаПослеОформления(ТелоДоОформления, ТелоОформленное)

	СущественныеОтличия = ОписаниеСущественныхОтличийПоТокенам(ТелоДоОформления, ТелоОформленное);
	
	Если ЗначениеЗаполнено(СущественныеОтличия) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СущественныеОтличия;
		Сообщение.Сообщить();

		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеСущественныхОтличийПоТокенам(ТелоДоОформления, ТелоОформленное)
	Попытка
		ПарсерКодаДоОформления = Обработки.ОМ_Парсер_ПарсерВстроенногоЯзыка.Создать();
		ТаблицаТокенов_ДоОформления = ПарсерКодаДоОформления.Токенизировать(ТелоДоОформления);
	Исключение
		Возврат "Ошибка разбора кода до оформления: " + ОписаниеОшибки();
	КонецПопытки;

	Попытка
		ПарсерКодаПослеОформления = Обработки.ОМ_Парсер_ПарсерВстроенногоЯзыка.Создать();
		ТаблицаТокенов_ПослеОформления = ПарсерКодаПослеОформления.Токенизировать(ТелоОформленное);
	Исключение
		Возврат "Ошибка разбора кода после оформления: " + ОписаниеОшибки();
	КонецПопытки;
	
	// Токены, которые нужно пропустить при сравнении
	ПропускаемыеТокены = Новый Массив;
	ПропускаемыеТокены.Добавить("ПустаяСтрока");
	ПропускаемыеТокены.Добавить("Комментарий");
	ПропускаемыеТокены.Добавить("ТочкаСЗапятой");
	
	// Токены, для которых нужно сравнить содержимое
	ТокеныДляСравненияСодержимого = Новый Массив;
	ТокеныДляСравненияСодержимого.Добавить("Идентификатор");
	ТокеныДляСравненияСодержимого.Добавить("Число");
	ТокеныДляСравненияСодержимого.Добавить("Строка");
	ТокеныДляСравненияСодержимого.Добавить("ДатаВремя");
	ТокеныДляСравненияСодержимого.Добавить("НачалоСтроки");
	ТокеныДляСравненияСодержимого.Добавить("ПродолжениеСтроки");
	ТокеныДляСравненияСодержимого.Добавить("ОкончаниеСтроки");
	
	ИндексДо = 0;
	ИндексПосле = 0;
	
	// Сравниваем токены до тех пор, пока не встретим токен КонецТекста или не дойдем до конца одной из таблиц
	Пока ИндексДо < ТаблицаТокенов_ДоОформления.Количество() И ИндексПосле < ТаблицаТокенов_ПослеОформления.Количество() Цикл
		
		// Пропускаем токены, которые не нужно сравнивать
		Пока ИндексДо < ТаблицаТокенов_ДоОформления.Количество() И 
			ПропускаемыеТокены.Найти(ТаблицаТокенов_ДоОформления[ИндексДо].Токен) <> Неопределено Цикл
			ИндексДо = ИндексДо + 1;
		КонецЦикла;
		
		Пока ИндексПосле < ТаблицаТокенов_ПослеОформления.Количество() И 
			ПропускаемыеТокены.Найти(ТаблицаТокенов_ПослеОформления[ИндексПосле].Токен) <> Неопределено Цикл
			ИндексПосле = ИндексПосле + 1;
		КонецЦикла;
		
		// Если достигли конца одной из таблиц - это ошибка, так как обе таблицы должны содержать КонецТекста
		Если ИндексДо >= ТаблицаТокенов_ДоОформления.Количество() Тогда
			Возврат "В исходном тексте отсутствует токен КонецТекста";
		ИначеЕсли ИндексПосле >= ТаблицаТокенов_ПослеОформления.Количество() Тогда
			Возврат "В оформленном тексте отсутствует токен КонецТекста";
		КонецЕсли;
		
		ТокенДо = ТаблицаТокенов_ДоОформления[ИндексДо];
		ТокенПосле = ТаблицаТокенов_ПослеОформления[ИндексПосле];
		
		// Сравниваем типы токенов
		Если ТокенДо.Токен <> ТокенПосле.Токен Тогда
			Возврат СтрШаблон("Несоответствие типов токенов в строке %1, колонке %2: '%3' вместо '%4'", 
				ТокенДо.НомерСтроки, 
				ТокенДо.НомерКолонки,
				ТокенДо.Токен,
				ТокенПосле.Токен);
		// Для определенных типов токенов сравниваем их содержимое
		ИначеЕсли ТокеныДляСравненияСодержимого.Найти(ТокенДо.Токен) <> Неопределено Тогда
			СодержимоеДо = Сред(ТелоДоОформления, ТокенДо.Позиция, ТокенДо.Длина);
			СодержимоеПосле = Сред(ТелоОформленное, ТокенПосле.Позиция, ТокенПосле.Длина);
			
			// Для идентификаторов сравниваем без учета регистра
			Если ТокенДо.Токен = "Идентификатор" Тогда
				Если ВРег(СодержимоеДо) <> ВРег(СодержимоеПосле) Тогда
					Возврат СтрШаблон("Несоответствие имени идентификатора в строке %1, колонке %2: '%3' вместо '%4'", 
						ТокенДо.НомерСтроки, 
						ТокенДо.НомерКолонки,
						СодержимоеДо,
						СодержимоеПосле);
				КонецЕсли;
			// Для остальных токенов сравниваем с учетом регистра
			ИначеЕсли СодержимоеДо <> СодержимоеПосле Тогда
				Возврат СтрШаблон("Несоответствие содержимого токена '%1' в строке %2, колонке %3: '%4' вместо '%5'", 
					ТокенДо.Токен,
					ТокенДо.НомерСтроки, 
					ТокенДо.НомерКолонки,
					СодержимоеДо,
					СодержимоеПосле);
			КонецЕсли;
		КонецЕсли;
		
		// Если достигли токена КонецТекста, то сравнение закончено
		Если ТокенДо.Токен = "КонецТекста" Тогда
			// Оба токена должны быть КонецТекста
			Если ТокенПосле.Токен <> "КонецТекста" Тогда
				Возврат СтрШаблон("Неожиданный токен вместо КонецТекста в оформленном тексте: '%1' в строке %2, колонке %3", 
					ТокенПосле.Токен,
					ТокенПосле.НомерСтроки,
					ТокенПосле.НомерКолонки);
			КонецЕсли;
			Прервать;
		КонецЕсли;
		
		ИндексДо = ИндексДо + 1;
		ИндексПосле = ИндексПосле + 1;
	КонецЦикла;
	
	Возврат "";
КонецФункции

&НаСервере
Процедура ПринятьИЗакрытьНаСервере()
	дз = ПолучитьИзВременногоХранилища(АдресДереваСтруктурыМодулей);
	
	Для Индекс = 0 По МетодыКОформлению.Количество() - 1 Цикл
		Метод = МетодыКОформлению[Индекс];
		
		// Находим строку метода в дереве по номеру строки
		СтрокиМетода = дз.Строки.НайтиСтроки(Новый Структура("НомерСтрокиВМетодыКОформлению", Индекс + 1), Истина);
		Если СтрокиМетода.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаМетода = СтрокиМетода[0];
		
		// Обновляем параметры метода в дереве
		Если ЗначениеЗаполнено(Метод.ТелоОформленное) Тогда
			СтрокаМетода.Содержимое.Тело = Метод.ТелоОформленное;
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(дз, АдресДереваСтруктурыМодулей);
КонецПроцедуры

#КонецОбласти

