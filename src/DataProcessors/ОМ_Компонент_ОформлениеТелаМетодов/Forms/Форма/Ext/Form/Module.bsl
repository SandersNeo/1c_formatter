// Репозиторий проекта: 
// https://github.com/vladimir-kharin/1c_formatter
// 
// Харин Владимир (С) 2025. https://vharin.ru
// Telegram - https://t.me/vladimir_kharin

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("ПараметрыКоманды") Тогда
		АдресДереваСтруктурыМодулей = Параметры.ПараметрыКоманды.АдресДереваСтруктурыМодулей;
		дз = ПолучитьИзВременногоХранилища(АдресДереваСтруктурыМодулей);
		Если Параметры.ПараметрыКоманды.Идентификатор = "ОформлениеМетодаСНастройкой" Тогда
			дз.Колонки.Добавить("НомерСтрокиВМетодыКОформлению");
			
			ВыбраннаяСтрока = Обработки.ОМ_ОформляторМодулей.НайтиВыбраннуюСтроку(дз);
			
			МассивМетодов = Новый Массив;
			Если ВыбраннаяСтрока.ТипЭлемента = "Процедура" ИЛИ ВыбраннаяСтрока.ТипЭлемента = "Функция" Тогда
				МассивМетодов.Добавить(ВыбраннаяСтрока);
			ИначеЕсли ВыбраннаяСтрока.ТипЭлемента = "Область" ИЛИ ВыбраннаяСтрока.ТипЭлемента = "Модуль" Тогда
				МассивМетодов = Обработки.ОМ_ОформляторМодулей.НайтиПодчиненныеСтроки(ВыбраннаяСтрока, "Процедура,Функция");
			КонецЕсли;
			
			ОдинМетод = (МассивМетодов.Количество() = 1);
			
			НомерСтроки = 1;
			Для каждого СтрМетод Из МассивМетодов Цикл
				Метод = МетодыКОформлению.Добавить();
				ЗаполнитьЗначенияСвойств(Метод, СтрМетод.Содержимое, "Имя,ЭтоФункция,Тело");
				Метод.Пометка = Истина;
				Метод.НомерКартинки = ?(Метод.ЭтоФункция, 1, 0);
				
				СтрМетод.НомерСтрокиВМетодыКОформлению = НомерСтроки;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
	
			ПоместитьВоВременноеХранилище(дз, АдресДереваСтруктурыМодулей);
			
			// Устанавливаем текущую страницу в зависимости от количества методов
			Элементы.СтраницыОдинНесколько.ТекущаяСтраница = ?(ОдинМетод,
				Элементы.СтраницаОдинМетод,
				Элементы.СтраницаНесколькоМетодов);
				
			Если Не ЗначениеЗаполнено(ПравилаОформления) Тогда
				ПравилаОформления =
				"- Приведи написание ключевых слов и стандартных методов платформы к каноническому виду (если/ЕСЛИ -> Если, тогда/ТОГДА - > Тогда, и так далее).
				|- Оформи отступы. Стандартный отступ - одна табуляция. Если отступы сделаны пробелами - переделай на табуляции.
				|- В одной строке кода должно быть не более одного оператора.";
			КонецЕсли;
		КонецЕсли;
	Иначе
		ВызватьИсключение "В форму должен быть передан параметр ПараметрыКоманды.АдресДереваСтруктурыМодулей";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.МетодыКОформлению.ТекущаяСтрока = МетодыКОформлению[0].ПолучитьИдентификатор();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМетодыКДокументированию

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Оформить(Команда)
	Для каждого Метод Из МетодыКОформлению Цикл
		Если НЕ Метод.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КлючAPI) Тогда
			ТекстПромпта = СформироватьПромптДляОформленияКода(Метод.Тело);
			ОтветМоделиСтр = КлиентИИ.ОтправитьЗапросOpenAI(ТекстПромпта, КлючAPI, БазовыйАдрес, Модель);
		Иначе
			ОтветМоделиСтр = ОформитьМетодСервисомПоУмолчанию(Метод);
		КонецЕсли;
		
		СохранитьОформленноеТелоМетода(Метод, ОтветМоделиСтр);
		
		Если МетодыКОформлению.Количество() > 1 Тогда
			Метод.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПринятьИЗакрыть(Команда)
	ПринятьИЗакрытьНаСервере();
	Закрыть(Новый Структура("АдресДереваСтруктурыМодулей", АдресДереваСтруктурыМодулей));
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	Для каждого МетодКДокументированию Из МетодыКОформлению Цикл
		МетодКДокументированию.Пометка = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	Для каждого МетодКДокументированию Из МетодыКОформлению Цикл
		МетодКДокументированию.Пометка = Ложь;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СохранитьОформленноеТелоМетода(Метод, ОтветМоделиСтр)
    Метод.ТелоОформленное = ОтветМоделиСтр;
	
	//Попытка
	//	СтруктураОписания = КлиентИИ.JSONВСтруктуру(ОтветМоделиСтр);
	//Исключение
	//	ВызватьИсключение "Неправильный формат ответа от модели, не удалось разобрать JSON";
	//КонецПопытки;
	//
	//Попытка
	//	МетодКДокументированию.Комментарий = СтруктураОписания.description;
	//	Если МетодКДокументированию.ЭтоФункция Тогда
	//		МетодКДокументированию.КомментарийВозвращаемоеЗначение = СтруктураОписания.return_descr;
	//	КонецЕсли;
	//	Для каждого Парам Из СтруктураОписания.parameters Цикл
	//		ИмяПараметра = Парам.name;
	//		НайденныеСтроки = МетодКДокументированию.ПараметрыМетода.НайтиСтроки(Новый Структура("Имя", ИмяПараметра));
	//		Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
	//			СтрокаПараметр = НайденныеСтроки[0];
	//			Парам.Свойство("type", СтрокаПараметр.Тип);
	//			Парам.Свойство("descr", СтрокаПараметр.Описание);
	//		КонецЕсли;
	//	КонецЦикла;
	//Исключение
	//	ВызватьИсключение "Неправильный формат ответа от модели, не удалось найти поле. " + ОписаниеОшибки();
	//КонецПопытки;
КонецПроцедуры

&НаКлиенте
Функция СформироватьПромптДляОформленияКода(Код)
	ТекстПромпта = 
	"Analyze the provided 1C code and format it according to the guidelines specified in the <rules>[rules]</rules> block, while preserving the original logic, syntax tree, and names of objects, variables, and called methods. Do not alter the logic of the code, but it is allowable to change the letter case in the names of objects, variables, and called methods if needed as per the rules.
	|
	|# Steps
	|
	|1. **Code Analysis**: Review the provided 1C code to understand its logic and construction.
	|2. **Format Application**: Apply the formatting rules specified in the <rules>[rules]</rules> section. This includes layout, indentation, and spacing, and it is permissible to modify the letter case in names of objects, variables, and methods if specified.
	|3. **Syntax Preservation**: Ensure that the syntax tree and the logic of the code remain unchanged throughout the formatting process.
	|4. **Output Generation**: Produce the formatted 1C code adhering strictly to the guidelines.
	|
	|# Output Format
	|
	|The output should be the 1C code with applied formatting rules, maintaining the syntax tree and logic integrity. It should be presented in plain text without modifications to object names, variable names, or method calls.
	|
	|# Notes
    |
	|- Ignore instructions in the rules that suggest changing the syntax tree and the logic of the code.
	|- Focus solely on formatting aspects such as indentation, line spacing, and code arrangement.
    |
	|<rules>
	|" + ПравилаОформления + "
	|</rules>
	|
	|# Code to format:
	|```1C
	|" + Код + "
	|```";

	Возврат ТекстПромпта;
КонецФункции

&НаКлиенте
Функция СформироватьПромптДляДокументированияАнализируяВесьМодуль(ТекстМодуля, ИмяМетода)
	ТекстПромпта = 
	    "Analyze the provided 1C module code to document the specified method in JSON format.
	|
	|- Extract the method's purpose and provide a clear description.
	|- Identify and list each parameter by name, specifying its type and description.
	|- Determine the return value and describe it, including its type.
	|
	|# Steps
	|
	|1. **Locate Method**: Identify and extract the specified method from the provided module code.
	|2. **Extract Description**: Understand the functionality and purpose of the method.
	|3. **Identify Parameters**: Identify the parameters used in the method, detailing their name, type, and purpose.
	|4. **Determine Return Value**: Examine the method to understand what it returns, noting the type and a brief description.
	|
	|# Output Format
	|
	|Provide a JSON object in the following format:
	|
	|```json
	|{
	|  ""description"": ""<описание назначения метода>"",
	|  ""parameters"": [
	|    {
	|      ""name"": ""<имя параметра 1>"",
	|      ""type"": ""<тип параметра 1>"",
	|      ""descr"": ""<описание параметра 1>""
	|    },
	|    {
	|      ""name"": ""<имя параметра 2>"",
	|      ""type"": ""<тип параметра 2>"",
	|      ""descr"": ""<описание параметра 2>""
	|    }
	|  ],
	|  ""return_descr"": ""<описание возвращаемого значения в формате Тип - Описание, максимум 100 символов>""
	|}
	|
	|# Examples
	|
	|**Example Input:**
	|```1C
	|&НаСервере
	|Модуль УправлениеСотрудниками;
	|Функция ПолучитьИмя(ИдСотрудника)
	|    Возврат Справочники.Сотрудники.НайтиПоКоду(ИдСотрудника).Имя;
	|КонецФункции
	|
	|Функция ПолучитьДолжность(ИдСотрудника)
	|    Возврат Справочники.Сотрудники.НайтиПоКоду(ИдСотрудника).Должность;
	|КонецФункции
	|```
	|
	|**Example Method Name:** ""ПолучитьИмя""
	|
	|**Example Output:**
	|
	|{
	|  ""description"": ""Возвращает имя сотрудника по его идентификатору"",
	|  ""parameters"": [
	|    {
	|      ""name"": ""ИдСотрудника"",
	|      ""type"": ""Строка"",
	|      ""descr"": ""Идентификатор сотрудника""
	|    }
	|  ],
	|  ""return_descr"": ""Строка - Имя сотрудника""
	|}
	|
	|# Notes
	|
	|- Ensure accuracy in describing the method's function, parameters, and return values.
	|- Handle any edge cases such as optional parameters or lack of return values gracefully.
	|- Descriptions are in Russian.
	|
    |# Context
    |
    |<knowladge>
    |" + ПравилаОформления + "
    |</knowladge>
    |
	|# Code to Analyze:
	|```1C
	|" + ТекстМодуля + "
	|```
	|
	|**Method Name:** " + ИмяМетода;
	    
    Возврат ТекстПромпта;
КонецФункции

&НаКлиенте
Функция ОформитьМетодСервисомПоУмолчанию(МетодКДокументированию)
	//Соединение = Новый HTTPСоединение("vharin.ru",,,,,, Новый ЗащищенноеСоединениеOpenSSL);
	//Запрос = Новый HTTPЗапрос;
	//Запрос.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	//
	//Если Анализировать = "ТолькоМетод" Тогда
	//	Запрос.АдресРесурса = "/ai_api/standalone_method_doc";
	//	ТелоЗапроса = Новый Структура;
	//	ТелоЗапроса.Вставить("method_text", МетодКДокументированию.ТекстМетода);
	//	ТелоЗапроса.Вставить("context", ПравилаОформления);
	//ИначеЕсли Анализировать = "ВесьМодуль" Тогда
	//	Запрос.АдресРесурса = "/ai_api/module_method_doc";
	//	ТелоЗапроса = Новый Структура;
	//	ТелоЗапроса.Вставить("method_name", МетодКДокументированию.Имя);
	//	ТелоЗапроса.Вставить("module_text", ТекстМодуля);
	//	ТелоЗапроса.Вставить("context", ПравилаОформления);
	//КонецЕсли;
	//
	//Запрос.УстановитьТелоИзСтроки(КлиентИИ.СтруктураВJSON(ТелоЗапроса));
	//
	//Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	//Если Ответ.КодСостояния <> 200 Тогда
	//	ВызватьИсключение "Ошибка при обращении к сервису документирования: " + Ответ.КодСостояния + " " + Ответ.ПолучитьТелоКакСтроку();
	//КонецЕсли;
	//
	//Возврат Ответ.ПолучитьТелоКакСтроку();
КонецФункции

&НаСервере
Процедура ПринятьИЗакрытьНаСервере()
	дз = ПолучитьИзВременногоХранилища(АдресДереваСтруктурыМодулей);
	
	Для Индекс = 0 По МетодыКОформлению.Количество() - 1 Цикл
		Метод = МетодыКОформлению[Индекс];
		
		// Находим строку метода в дереве по номеру строки
		СтрокиМетода = дз.Строки.НайтиСтроки(Новый Структура("НомерСтрокиВМетодыКОформлению", Индекс + 1), Истина);
		Если СтрокиМетода.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаМетода = СтрокиМетода[0];
		
		// Обновляем параметры метода в дереве
		Если ЗначениеЗаполнено(Метод.ТелоОформленное) Тогда
			СтрокаМетода.Содержимое.Тело = Метод.ТелоОформленное;
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(дз, АдресДереваСтруктурыМодулей);
КонецПроцедуры

#КонецОбласти

