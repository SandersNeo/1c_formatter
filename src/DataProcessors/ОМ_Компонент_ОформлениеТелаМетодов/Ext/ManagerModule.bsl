#Область ПрограммныйИнтерфейс

Процедура ДобавитьКомандыДействий(КомандыДействий) Экспорт
	НоваяСтрока = КомандыДействий.Добавить();
	НоваяСтрока.Представление = "Форматирование тела методов (тестирование)...";
	НоваяСтрока.Идентификатор = "ОформлениеМетодаСНастройкой";
	НоваяСтрока.ОбластьДействия = "Процедура,Функция,Модуль,Область";
	НоваяСтрока.Порядок = 203;
	НоваяСтрока.СпособЗапускаДействия = "ОткрытиеФормы";

	НоваяСтрока = КомандыДействий.Добавить();
	НоваяСтрока.Представление = "Форматирование тела методов";
	НоваяСтрока.Идентификатор = "ФорматированиеКода";
	НоваяСтрока.Порядок = 104;
	НоваяСтрока.СпособЗапускаДействия = "ВызовМетодаМодуляМенеджера";
	
	НоваяСтрока = КомандыДействий.Добавить();
	НоваяСтрока.Представление = "Форматирование тела методов";
	НоваяСтрока.Идентификатор = "ФорматированиеКодаВыбранногоОбъекта";
	НоваяСтрока.ОбластьДействия = "Процедура,Функция,Модуль,Область,Код";
	НоваяСтрока.Порядок = 104;
	НоваяСтрока.СпособЗапускаДействия = "ВызовМетодаМодуляМенеджера";
КонецПроцедуры

// Выполняет действие по идентификатору команды, модифицируя дерево структуры модулей.
// 
// Параметры:
//  ИдКоманды        - Строка - Идентификатор выполняемой команды
//  ПараметрыКоманды - Объект - Объект, содержащий параметры команды
Процедура ВыполнитьДействие(ИдКоманды, ПараметрыКоманды) Экспорт
	МассивЭлементов = Новый Массив;
	
	Если ИдКоманды = "ФорматированиеКода" Тогда
		МассивЭлементов = Обработки.ОМ_ОформляторМодулей.НайтиПодчиненныеСтроки(ПараметрыКоманды.ДеревоСтруктурыМодулей, "Процедура,Функция,Код");
	ИначеЕсли ИдКоманды = "ФорматированиеКодаВыбранногоОбъекта" Тогда
		ВыбраннаяСтрока = Обработки.ОМ_ОформляторМодулей.НайтиВыбраннуюСтроку(ПараметрыКоманды.ДеревоСтруктурыМодулей);
		
		Если ВыбраннаяСтрока.ТипЭлемента = "Процедура" 
			ИЛИ ВыбраннаяСтрока.ТипЭлемента = "Функция" 
			ИЛИ ВыбраннаяСтрока.ТипЭлемента = "Код" 
		Тогда
			МассивЭлементов.Добавить(ВыбраннаяСтрока);
		ИначеЕсли ВыбраннаяСтрока.ТипЭлемента = "Область" ИЛИ ВыбраннаяСтрока.ТипЭлемента = "Модуль" Тогда
			МассивЭлементов = Обработки.ОМ_ОформляторМодулей.НайтиПодчиненныеСтроки(ВыбраннаяСтрока, "Процедура,Функция,Код");
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(МассивЭлементов) Тогда
		ФорматироватьКодВЭлементахДереваСтруктурыМодулей(МассивЭлементов);
	КонецЕсли;
КонецПроцедуры

// Форматирует код в переданных элементах дерева структуры модулей
// 
// Параметры:
//  ДеревоСтруктуры - Дерево - Исходное дерево структуры модулей
// 
// Возвращаемое значение:
//  Дерево - Дерево структуры модулей со стандартными областями
Процедура ФорматироватьКодВЭлементахДереваСтруктурыМодулей(МассивЭлементов) Экспорт
	Для каждого ЭлементДереваСтруктуры Из МассивЭлементов Цикл
		СтрМодуль = Обработки.ОМ_ОформляторМодулей.НайтиСтрокуМодуля(ЭлементДереваСтруктуры);
		АнглСинтаксис = (СтрМодуль.Содержимое.Синтаксис = "Английский");

		ЭлементДереваСтруктуры.Содержимое.Тело = Оформить(ЭлементДереваСтруктуры.Содержимое.Тело, АнглСинтаксис);
	КонецЦикла;
КонецПроцедуры

Функция Оформить(Текст, _АнглСинтаксис = Ложь, ПроверятьРезультат = Истина) Экспорт
	Компонент_ОформлениеТелаМетодов = ОбработкаОформлениеТелаМетодов();
	ОформленныйТекст = Компонент_ОформлениеТелаМетодов.Оформить(Текст, _АнглСинтаксис);
	
	Если ПроверятьРезультат Тогда
		ОписаниеОтличий = ОписаниеСущественныхОтличийПоТокенам(Текст, ОформленныйТекст);
		Если ЗначениеЗаполнено(ОписаниеОтличий) Тогда
			ВызватьИсключение "Ошибка при форматировании кода. " + ОписаниеОтличий;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОформленныйТекст;
КонецФункции

Функция ОписаниеСущественныхОтличийПоТокенам(ТелоДоОформления, ТелоОформленное) Экспорт
	Попытка
		ПарсерКодаДоОформления = Обработки.ОМ_Парсер_ПарсерВстроенногоЯзыка.Создать();
		ТаблицаТокенов_ДоОформления = ПарсерКодаДоОформления.Токенизировать(ТелоДоОформления);
	Исключение
		Возврат "Ошибка разбора кода до оформления: " + ОписаниеОшибки();
	КонецПопытки;

	Попытка
		ПарсерКодаПослеОформления = Обработки.ОМ_Парсер_ПарсерВстроенногоЯзыка.Создать();
		ТаблицаТокенов_ПослеОформления = ПарсерКодаПослеОформления.Токенизировать(ТелоОформленное);
	Исключение
		Возврат "Ошибка разбора кода после оформления: " + ОписаниеОшибки();
	КонецПопытки;
	
	// Токены, которые нужно пропустить при сравнении
	ПропускаемыеТокены = Новый Массив;
	ПропускаемыеТокены.Добавить("ПустаяСтрока");
	ПропускаемыеТокены.Добавить("Комментарий");
	ПропускаемыеТокены.Добавить("ТочкаСЗапятой");
	
	// Токены, для которых нужно сравнить содержимое
	ТокеныДляСравненияСодержимого = Новый Массив;
	ТокеныДляСравненияСодержимого.Добавить("Идентификатор");
	ТокеныДляСравненияСодержимого.Добавить("Число");
	ТокеныДляСравненияСодержимого.Добавить("Строка");
	ТокеныДляСравненияСодержимого.Добавить("ДатаВремя");
	ТокеныДляСравненияСодержимого.Добавить("НачалоСтроки");
	ТокеныДляСравненияСодержимого.Добавить("ПродолжениеСтроки");
	ТокеныДляСравненияСодержимого.Добавить("ОкончаниеСтроки");
	
	ИндексДо = 0;
	ИндексПосле = 0;
	
	// Сравниваем токены до тех пор, пока не встретим токен КонецТекста или не дойдем до конца одной из таблиц
	Пока ИндексДо < ТаблицаТокенов_ДоОформления.Количество() И ИндексПосле < ТаблицаТокенов_ПослеОформления.Количество() Цикл
		
		// Пропускаем токены, которые не нужно сравнивать
		Пока ИндексДо < ТаблицаТокенов_ДоОформления.Количество() И 
			ПропускаемыеТокены.Найти(ТаблицаТокенов_ДоОформления[ИндексДо].Токен) <> Неопределено Цикл
			ИндексДо = ИндексДо + 1;
		КонецЦикла;
		
		Пока ИндексПосле < ТаблицаТокенов_ПослеОформления.Количество() И 
			ПропускаемыеТокены.Найти(ТаблицаТокенов_ПослеОформления[ИндексПосле].Токен) <> Неопределено Цикл
			ИндексПосле = ИндексПосле + 1;
		КонецЦикла;
		
		// Если достигли конца одной из таблиц - это ошибка, так как обе таблицы должны содержать КонецТекста
		Если ИндексДо >= ТаблицаТокенов_ДоОформления.Количество() Тогда
			Возврат "В исходном тексте отсутствует токен КонецТекста";
		ИначеЕсли ИндексПосле >= ТаблицаТокенов_ПослеОформления.Количество() Тогда
			Возврат "В оформленном тексте отсутствует токен КонецТекста";
		КонецЕсли;
		
		ТокенДо = ТаблицаТокенов_ДоОформления[ИндексДо];
		ТокенПосле = ТаблицаТокенов_ПослеОформления[ИндексПосле];
		
		// Сравниваем типы токенов
		Если ТокенДо.Токен <> ТокенПосле.Токен Тогда
			Возврат СтрШаблон("Несоответствие типов токенов в строке %1, колонке %2: '%3' вместо '%4'", 
				ТокенДо.НомерСтроки, 
				ТокенДо.НомерКолонки,
				ТокенПосле.Токен,
				ТокенДо.Токен);
		// Для определенных типов токенов сравниваем их содержимое
		ИначеЕсли ТокеныДляСравненияСодержимого.Найти(ТокенДо.Токен) <> Неопределено Тогда
			СодержимоеДо = Сред(ТелоДоОформления, ТокенДо.Позиция, ТокенДо.Длина);
			СодержимоеПосле = Сред(ТелоОформленное, ТокенПосле.Позиция, ТокенПосле.Длина);
			
			// Для идентификаторов сравниваем без учета регистра
			Если ТокенДо.Токен = "Идентификатор" Тогда
				Если ВРег(СодержимоеДо) <> ВРег(СодержимоеПосле) Тогда
					Возврат СтрШаблон("Несоответствие имени идентификатора в строке %1, колонке %2: '%3' вместо '%4'", 
						ТокенДо.НомерСтроки, 
						ТокенДо.НомерКолонки,
						СодержимоеПосле,
						СодержимоеДо);
				КонецЕсли;
			// Для остальных токенов сравниваем с учетом регистра
			ИначеЕсли СодержимоеДо <> СодержимоеПосле Тогда
				Возврат СтрШаблон("Несоответствие содержимого токена '%1' в строке %2, колонке %3: '%4' вместо '%5'", 
					ТокенДо.Токен,
					ТокенДо.НомерСтроки, 
					ТокенДо.НомерКолонки,
					СодержимоеПосле,
					СодержимоеДо);
			КонецЕсли;
		КонецЕсли;
		
		// Если достигли токена КонецТекста, то сравнение закончено
		Если ТокенДо.Токен = "КонецТекста" Тогда
			// Оба токена должны быть КонецТекста
			Если ТокенПосле.Токен <> "КонецТекста" Тогда
				Возврат СтрШаблон("Неожиданный токен вместо КонецТекста в оформленном тексте: '%1' в строке %2, колонке %3", 
					ТокенПосле.Токен,
					ТокенПосле.НомерСтроки,
					ТокенПосле.НомерКолонки);
			КонецЕсли;
			Прервать;
		КонецЕсли;
		
		ИндексДо = ИндексДо + 1;
		ИндексПосле = ИндексПосле + 1;
	КонецЦикла;
	
	Возврат "";
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОбработкаОформлениеТелаМетодов()
	Возврат Обработки.ОМ_Компонент_ОформлениеТелаМетодов.Создать();
КонецФункции

#КонецОбласти
