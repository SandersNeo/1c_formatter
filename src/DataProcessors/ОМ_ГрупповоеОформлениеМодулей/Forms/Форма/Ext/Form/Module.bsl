#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПутьКВыгрузкеКонфигурацииНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораПапки = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораПапки.Заголовок = "Выберите каталог выгрузки конфигурации";
	ДиалогВыбораПапки.ПолноеИмяФайла = ПутьКВыгрузкеКонфигурации;
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("ПутьКВыгрузкеКонфигурацииНачалоВыбораЗавершение", ЭтотОбъект);
	ДиалогВыбораПапки.Показать(ОповещениеОВыборе);

КонецПроцедуры

&НаКлиенте
Процедура ПутьКВыгрузкеКонфигурацииПриИзменении(Элемент)

	ЗаполнитьТаблицуФайлов();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура Оформить(Команда)

	Если ФайлыМодулей.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "Нет файлов для оформления!");
		Возврат ;
	КонецЕсли;
	
	ВыбранныеФайлы = ФайлыМодулей.НайтиСтроки(Новый Структура("Пометка", Истина));
	
	Если ВыбранныеФайлы.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "Не выбраны файлы для оформления!");
		Возврат ;
	КонецЕсли;
	
	КоличествоОбработанных = 0;
	
	Для Каждого СтрокаФайла Из ВыбранныеФайлы Цикл
		// Проверяем, выбран ли хотя бы один флаг оформления
		Если Не (СтрокаФайла.РасстановкаОбластей
			Или СтрокаФайла.Форматирование
			Или СтрокаФайла.ДокументированиеПрограммногоИнтерфейса
			Или СтрокаФайла.ИсключениеКомпиляцииНаКлиенте
			Или СтрокаФайла.СортировкаСлужебныхМетодов
			Или СтрокаФайла.ЗавершающийКомментарийМетодов)
		Тогда
			Продолжить;
		КонецЕсли;
	
		// Получаем полный путь к файлу
		ПолныйПуть = ПолучитьПолныйПутьКФайлу(СтрокаФайла);
	
		// Получаем текст модуля
		ТекстМодуля = Ждать ПолучитьТекстМодуля(ПолныйПуть);
		Если ПустаяСтрока(ТекстМодуля) Тогда
			Продолжить;
		КонецЕсли;
	
		// Разбираем текст модуля в дерево и получаем адрес хранилища
		АдресДерева = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		РазобратьТекстМодуляВДерево(АдресДерева, ТекстМодуля);
	
		// Обработка дерева модуля в соответствии с выбранными флагами
		// Расстановка областей
		Если СтрокаФайла.РасстановкаОбластей Тогда
			Попытка
				ВыполнитьДействие(АдресДерева, "РасстановкаОбластей", "РасстановкаОбластей");
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстСообщения = СтрШаблон(
					"Ошибка при расстановке областей в модуле: %1
					|Текст ошибки: %2", ПолныйПуть, ИнформацияОбОшибке.Описание);
				Сообщить(ТекстСообщения, СтатусСообщения.Важное);
			КонецПопытки;
		КонецЕсли;
	
		// Форматирование кода
		Если СтрокаФайла.Форматирование Тогда
			ПараметрыДокументирования = Новый Структура;
			ПараметрыДокументирования.Вставить("КлючAPI", КлючAPI);
			ПараметрыДокументирования.Вставить("БазовыйАдрес", БазовыйАдрес);
			ПараметрыДокументирования.Вставить("Модель", Модель);
			ПараметрыДокументирования.Вставить("СпособДокументирования", СпособДокументирования);
			
			Попытка
				ВыполнитьДействие(АдресДерева, "ОформлениеТелаМетодов", "ФорматированиеКода", ПараметрыДокументирования);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстСообщения = СтрШаблон(
					"Ошибка при форматировании кода в модуле: %1
					|Текст ошибки: %2", ПолныйПуть, ИнформацияОбОшибке.Описание);
				Сообщить(ТекстСообщения, СтатусСообщения.Важное);
			КонецПопытки;
		КонецЕсли;
	
		// Документирование программного интерфейса
		Если СтрокаФайла.ДокументированиеПрограммногоИнтерфейса Тогда
			Попытка
				ВыполнитьДействие(АдресДерева, "ДокументированиеМетодов", "ДокументированиеПрограммногоИнтерфейса");
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстСообщения = СтрШаблон(
					"Ошибка при документировании программного интерфейса в модуле: %1
					|Текст ошибки: %2", ПолныйПуть, ИнформацияОбОшибке.Описание);
				Сообщить(ТекстСообщения, СтатусСообщения.Важное);
			КонецПопытки;
		КонецЕсли;

		// Исключение компиляции на клиенте
		Если СтрокаФайла.ИсключениеКомпиляцииНаКлиенте Тогда
			Попытка
				ВыполнитьДействие(АдресДерева, "УстановкаИнструкцийПрепроцессора", "УстановкаИнструкцийПрепроцессора");
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстСообщения = СтрШаблон(
					"Ошибка при установке инструкций препроцессора в модуле: %1
					|Текст ошибки: %2", ПолныйПуть, ИнформацияОбОшибке.Описание);
				Сообщить(ТекстСообщения, СтатусСообщения.Важное);
			КонецПопытки;
		КонецЕсли;

		// Сортировка служебных методов
		Если СтрокаФайла.СортировкаСлужебныхМетодов Тогда
			Попытка
				ВыполнитьДействие(АдресДерева, "СортировкаМетодов", "СортировкаСлужебныхМетодов");
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстСообщения = СтрШаблон(
					"Ошибка при сортировке служебных методов в модуле: %1
					|Текст ошибки: %2", ПолныйПуть, ИнформацияОбОшибке.Описание);
				Сообщить(ТекстСообщения, СтатусСообщения.Важное);
			КонецПопытки;
		КонецЕсли;
	
		// Завершающий комментарий методов
		Если СтрокаФайла.ЗавершающийКомментарийМетодов Тогда
			Попытка
				ВыполнитьДействие(АдресДерева, "ВставкаЗавершающихКомментариев", "ВставкаЗавершающихКомментариев");
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстСообщения = СтрШаблон(
					"Ошибка при добавлении завершающих комментариев в модуле: %1
					|Текст ошибки: %2", ПолныйПуть, ИнформацияОбОшибке.Описание);
				Сообщить(ТекстСообщения, СтатусСообщения.Важное);
			КонецПопытки;
		КонецЕсли;
	
		// Получаем текст модуля из дерева структуры
		ТекстМодуля = ПолучитьТекстМодуляИзДерева(АдресДерева);
	
		// Сохраняем текст обратно в файл
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ТекстМодуля);
		Ждать ТекстовыйДокумент.ЗаписатьАсинх(ПолныйПуть, КодировкаТекста.UTF8);
		
		// TODO: Снимать флаги с обработанных полностью успешно модулей и выполненных успешно действий оформления
		
		КоличествоОбработанных = КоличествоОбработанных + 1;
	КонецЦикла;
	
	ПоказатьПредупреждение(, "Обработано " + КоличествоОбработанных + " файл(ов) из " + ВыбранныеФайлы.Количество());

КонецПроцедуры

&НаКлиенте
Процедура ПометитьВсе(Команда)

	УстановитьЗначениеРеквизита("Пометка", Истина);

КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкиВсе(Команда)

	УстановитьЗначениеРеквизита("Пометка", Ложь);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагДокументированиеПрограммногоИнтерфейса(Команда)

	УстановитьЗначениеРеквизита("ДокументированиеПрограммногоИнтерфейса", Истина);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагЗавершающийКомментарийМетодов(Команда)

	УстановитьЗначениеРеквизита("ЗавершающийКомментарийМетодов", Истина);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагИсключениеКомпиляцииНаКлиенте(Команда)

	УстановитьЗначениеРеквизита("ИсключениеКомпиляцииНаКлиенте", Истина);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагРасстановкаОбластей(Команда)

	УстановитьЗначениеРеквизита("РасстановкаОбластей", Истина);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагСортировкаСлужебныхМетодов(Команда)

	УстановитьЗначениеРеквизита("СортировкаСлужебныхМетодов", Истина);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагФорматирование(Команда)

	УстановитьЗначениеРеквизита("Форматирование", Истина);

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлагРасстановкаОбластей(Команда)

	УстановитьЗначениеРеквизита("РасстановкаОбластей", Ложь);

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлагФорматирование(Команда)

	УстановитьЗначениеРеквизита("Форматирование", Ложь);

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлагДокументированиеПрограммногоИнтерфейса(Команда)

	УстановитьЗначениеРеквизита("ДокументированиеПрограммногоИнтерфейса", Ложь);

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлагИсключениеКомпиляцииНаКлиенте(Команда)

	УстановитьЗначениеРеквизита("ИсключениеКомпиляцииНаКлиенте", Ложь);

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлагСортировкаСлужебныхМетодов(Команда)

	УстановитьЗначениеРеквизита("СортировкаСлужебныхМетодов", Ложь);

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлагЗавершающийКомментарийМетодов(Команда)

	УстановитьЗначениеРеквизита("ЗавершающийКомментарийМетодов", Ложь);

КонецПроцедуры

&НаКлиенте
Асинх Процедура Статистика(Команда)

	ВсегоСтрок = 0;
	ПустыхСтрок = 0;
	СтрокКомментариев = 0;
	КодаСтрок = 0;
	
	Для Каждого Стр Из ФайлыМодулей Цикл
		Если Стр.Пометка Тогда
			ПолныйПуть = ПолучитьПолныйПутьКФайлу(Стр);
	
			ТекстМодуля = Новый ТекстовыйДокумент;
			Попытка
				Ждать ТекстМодуля.ПрочитатьАсинх(ПолныйПуть);
				КоличествоСтрок = ТекстМодуля.КоличествоСтрок();
				ВсегоСтрок = ВсегоСтрок + КоличествоСтрок;
	
				Для НомерСтроки = 1 По КоличествоСтрок Цикл
					ТекстСтроки = ТекстМодуля.ПолучитьСтроку(НомерСтроки);
	
					Если Не ЗначениеЗаполнено(ТекстСтроки) Тогда
						ПустыхСтрок = ПустыхСтрок + 1;
					ИначеЕсли СтрНачинаетсяС(СокрЛ(ТекстСтроки), "//") Тогда
						СтрокКомментариев = СтрокКомментариев + 1;
					Иначе
						КодаСтрок = КодаСтрок + 1;
					КонецЕсли;
				КонецЦикла;
			Исключение
				Сообщить("Ошибка при чтении файла: " + ПолныйПуть + Символы.ПС + ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	ТекстСообщения = СтрШаблон(
		"Статистика по выбранным модулям:
		|Всего строк: %1
		|Пустых строк: %2 (%3%%)
		|Строк комментариев: %4 (%5%%)
		|Строк кода: %6 (%7%%)", 
		ВсегоСтрок, 
		ПустыхСтрок, Окр(ПустыхСтрок * 100 / ?(ВсегоСтрок = 0, 1, ВсегоСтрок), 2), 
		СтрокКомментариев, Окр(СтрокКомментариев * 100 / ?(ВсегоСтрок = 0, 1, ВсегоСтрок), 2), 
		КодаСтрок, Окр(КодаСтрок * 100 / ?(ВсегоСтрок = 0, 1, ВсегоСтрок), 2)
		);
	
	Сообщить(ТекстСообщения);

КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("БазовыйАдрес", БазовыйАдрес);
	ПараметрыФормы.Вставить("КлючAPI", КлючAPI);
	ПараметрыФормы.Вставить("Модель", Модель);
	ПараметрыФормы.Вставить("СпособДокументирования", СпособДокументирования);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастройкаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ОМ_ГрупповоеОформлениеМодулей.Форма.ФормаНастройки", 
		ПараметрыФормы, 
		ЭтотОбъект,
		,
		,
		,
		ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПутьКВыгрузкеКонфигурацииНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ВыбранныеФайлы <> Неопределено Тогда
		ПутьКВыгрузкеКонфигурации = ВыбранныеФайлы[0];
		ПоказатьОповещениеПользователя("Чтение модулей конфигурации");
		ЗаполнитьТаблицуФайлов();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗаполнитьТаблицуФайлов()

	Если ПустаяСтрока(ПутьКВыгрузкеКонфигурации) Тогда
		Возврат ;
	КонецЕсли;
	
	ФайлыМодулей.Очистить();
	НайденныеФайлы = Ждать НайтиФайлыАсинх(ПутьКВыгрузкеКонфигурации, "*.bsl", Истина);
	
	Для Каждого Файл Из НайденныеФайлы Цикл
		РазделительПути = ПолучитьРазделительПути();
		Смещение = СтрДлина(ПутьКВыгрузкеКонфигурации) + 1;
	
		// Если путь не заканчивается на разделитель, добавляем 1 к смещению
		Если Прав(ПутьКВыгрузкеКонфигурации, 1) <> РазделительПути Тогда
			Смещение = Смещение + 1;
		КонецЕсли;
	
		ОтносительныйПуть = Сред(Файл.Путь, Смещение);
		ЧастиПути = СтрРазделить(ОтносительныйПуть, РазделительПути, Ложь);
	
		ТипОбъектаМД = "";
		ИмяОбъектаМД = "";
	
		Если ЧастиПути.Количество() > 0 Тогда
			ТипОбъектаМД = ЧастиПути[0];
		КонецЕсли;
	
		Если ЧастиПути.Количество() > 1 Тогда
			ИмяОбъектаМД = ЧастиПути[1];
		КонецЕсли;
	
		ОстатокПути = "";
		Если ЧастиПути.Количество() > 2 Тогда
			// Создаем новый массив только с элементами начиная с индекса 2
			ЧастиОтносительногоПути = Новый Массив;
			Для Индекс = 2 По ЧастиПути.Количество() - 1 Цикл
				ЧастиОтносительногоПути.Добавить(ЧастиПути[Индекс]);
			КонецЦикла;
	
			ОстатокПути = СтрСоединить(ЧастиОтносительногоПути, РазделительПути);
		КонецЕсли;
	
		НоваяСтрока = ФайлыМодулей.Добавить();
		НоваяСтрока.Пометка = Истина;
		НоваяСтрока.ИмяФайлаМодуля = Файл.ИмяБезРасширения;
		НоваяСтрока.ТипОбъектаМД = ТипОбъектаМД;
		НоваяСтрока.ИмяОбъектаМД = ИмяОбъектаМД;
		НоваяСтрока.ОтносительныйПуть = ОстатокПути;
	
		НоваяСтрока.РасстановкаОбластей = Истина;
		НоваяСтрока.Форматирование = Истина;
		НоваяСтрока.ДокументированиеПрограммногоИнтерфейса = Истина;
		НоваяСтрока.ИсключениеКомпиляцииНаКлиенте = (НоваяСтрока.ИмяФайлаМодуля = "ManagerModule");
		НоваяСтрока.СортировкаСлужебныхМетодов = Ложь;
		НоваяСтрока.ЗавершающийКомментарийМетодов = Ложь;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьПолныйПутьКФайлу(СтрокаФайла)

	РазделительПути = ПолучитьРазделительПути();
	
	// Формируем полный путь к файлу
	ПолныйПуть = ПутьКВыгрузкеКонфигурации;
	Если Прав(ПолныйПуть, 1) <> РазделительПути Тогда
		ПолныйПуть = ПолныйПуть + РазделительПути;
	КонецЕсли;
	
	ПолныйПуть = ПолныйПуть + СтрокаФайла.ТипОбъектаМД + РазделительПути + СтрокаФайла.ИмяОбъектаМД;
	
	Если Не ПустаяСтрока(СтрокаФайла.ОтносительныйПуть) Тогда
		ПолныйПуть = ПолныйПуть + РазделительПути + СтрокаФайла.ОтносительныйПуть;
	КонецЕсли;
	
	ПолныйПуть = ПолныйПуть + РазделительПути + СтрокаФайла.ИмяФайлаМодуля + ".bsl";
	
	Возврат ПолныйПуть;

КонецФункции

&НаКлиенте
Асинх Функция ПолучитьТекстМодуля(ПолныйПуть)

	ТекстМодуля = Новый ТекстовыйДокумент;
	Попытка
		Ждать ТекстМодуля.ПрочитатьАсинх(ПолныйПуть);
		Возврат ТекстМодуля.ПолучитьТекст();
	Исключение
		Сообщить("Ошибка при чтении файла: " + ПолныйПуть + Символы.ПС + ОписаниеОшибки());
		Возврат "";
	КонецПопытки;

КонецФункции

&НаСервереБезКонтекста
Процедура РазобратьТекстМодуляВДерево(АдресДерева, ТекстМодуля)

	// Используем существующую функцию из модуля менеджера обработки ОМ_ОформляторМодулей
	// для разбора текста модуля в дерево
	ДеревоМодуля = Обработки.ОМ_ОформляторМодулей.РазобратьТекстВДеревоМодуля(ТекстМодуля);
	
	// Сохраняем дерево модуля во временное хранилище
	ПоместитьВоВременноеХранилище(ДеревоМодуля, АдресДерева);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьДействие(АдресДерева, ИмяКомпонента, ИдКоманды, ДопПараметры = Неопределено)

	// Получаем дерево модуля из временного хранилища
	ДеревоМодуля = ПолучитьИзВременногоХранилища(АдресДерева);
	
	ПараметрыКоманды = Новый Структура("ДеревоСтруктурыМодулей", ДеревоМодуля);
	Если ДопПараметры <> Неопределено Тогда
		Для каждого КлючЗначение Из ДопПараметры Цикл
			ПараметрыКоманды.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	МенеджерОбработки = Обработки["ОМ_Компонент_" + ИмяКомпонента];
	МенеджерОбработки.ВыполнитьДействие(ИдКоманды, ПараметрыКоманды);
	
	// Сохраняем результат обратно во временное хранилище по тому же адресу
	ПоместитьВоВременноеХранилище(ПараметрыКоманды.ДеревоСтруктурыМодулей, АдресДерева);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекстМодуляИзДерева(АдресДерева)

	ДеревоМодуля = ПолучитьИзВременногоХранилища(АдресДерева);
	Возврат Обработки.ОМ_Компонент_ГенерацияТекстовМодулей.ТекстМодуля(ДеревоМодуля.Строки[0]);

КонецФункции

&НаКлиенте
Процедура УстановитьПометкиВсе(Значение)

	Если ФайлыМодулей.Количество() = 0 Тогда
		Возврат ;
	КонецЕсли;
	
	Для Каждого Строка Из ФайлыМодулей Цикл
		Строка.Пометка = Значение;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеРеквизита(ИмяРеквизита, Значение)

	Если ФайлыМодулей.Количество() = 0 Тогда
		Возврат ;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.ФайлыМодулей.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		// Установка значения только для выделенных строк
		Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
			Строка = ФайлыМодулей.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если Строка <> Неопределено Тогда
				Строка[ИмяРеквизита] = Значение;
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Установка значения для всех строк
		Для Каждого Строка Из ФайлыМодулей Цикл
			Строка[ИмяРеквизита] = Значение;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастройкаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено И ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		БазовыйАдрес = РезультатЗакрытия.БазовыйАдрес;
		КлючAPI = РезультатЗакрытия.КлючAPI;
		Модель = РезультатЗакрытия.Модель;
		СпособДокументирования = РезультатЗакрытия.СпособДокументирования;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

