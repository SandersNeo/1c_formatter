#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("ПараметрыКоманды") Тогда
		АдресДереваСтруктурыМодулей = Параметры.ПараметрыКоманды.АдресДереваСтруктурыМодулей;
        дз = ПолучитьИзВременногоХранилища(АдресДереваСтруктурыМодулей);
		Если Параметры.ПараметрыКоманды.Идентификатор = "ДокументированиеВыбранногоМетодаСНастройкой" Тогда
            дз.Колонки.Добавить("НомерСтрокиВМетодыКДокументированию");
			
            ВыбраннаяСтрока = Обработки.ОМ_ОформляторМодулей.НайтиВыбраннуюСтроку(дз);
			
            МассивМетодов = Новый Массив;
			Если ВыбраннаяСтрока.ТипЭлемента = "Процедура" ИЛИ ВыбраннаяСтрока.ТипЭлемента = "Функция" Тогда
				МассивМетодов.Добавить(ВыбраннаяСтрока);
			ИначеЕсли ВыбраннаяСтрока.ТипЭлемента = "Область" ИЛИ ВыбраннаяСтрока.ТипЭлемента = "Модуль" Тогда
				МассивМетодов = Обработки.ОМ_ОформляторМодулей.НайтиПодчиненныеСтроки(ВыбраннаяСтрока, "Процедура,Функция");
			КонецЕсли;
			
			СтрМодуль = Обработки.ОМ_ОформляторМодулей.НайтиСтрокуМодуля(ВыбраннаяСтрока);
			ТекстМодуля = Обработки.ОМ_Компонент_ГенерацияТекстовМодулей.ТекстМодуля(СтрМодуль);
			
			ОдинМетод = (МассивМетодов.Количество() = 1);
			
			НомерСтроки = 1;
			Для каждого СтрМетод Из МассивМетодов Цикл
				МетодКДокументированию = МетодыКДокументированию.Добавить();
				ЗаполнитьЗначенияСвойств(МетодКДокументированию, СтрМетод.Содержимое, "Имя,ЭтоФункция,Комментарий,КомментарийВозвращаемоеЗначение");
				МетодКДокументированию.ТекстМетода = Обработки.ОМ_Компонент_ГенерацияТекстовМодулей.ГенерироватьТекстМетода(СтрМетод);
				МетодКДокументированию.ПараметрыМетода.Загрузить(СтрМетод.Содержимое.Параметры);
				МетодКДокументированию.Пометка = ОдинМетод ИЛИ СтрМетод.Содержимое.Экспортная;
				МетодКДокументированию.НомерКартинки = ?(МетодКДокументированию.ЭтоФункция, 1, 0);
				
                СтрМетод.НомерСтрокиВМетодыКДокументированию = НомерСтроки;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;

            ПоместитьВоВременноеХранилище(дз, АдресДереваСтруктурыМодулей);
			
			// Устанавливаем текущую страницу в зависимости от количества методов
			Элементы.СтраницыОдинНесколько.ТекущаяСтраница = ?(ОдинМетод,
				Элементы.СтраницаОдинМетод,
				Элементы.СтраницаНесколькоМетодов);
		КонецЕсли;
			
		Анализировать = "ТолькоМетод";
	Иначе
		ВызватьИсключение "В форму должен быть передан параметр ПараметрыКоманды.АдресДереваСтруктурыМодулей";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГенерироватьОписание(Команда)
	Для каждого МетодКДокументированию Из МетодыКДокументированию Цикл
		Если НЕ МетодКДокументированию.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
        Если Анализировать = "ТолькоМетод" Тогда
            ТекстПромпта = СформироватьПромптДляДокументированияАнализируяТолькоМетод(МетодКДокументированию.ТекстМетода);
        ИначеЕсли Анализировать = "ВесьМодуль" Тогда
            ТекстПромпта = СформироватьПромптДляДокументированияАнализируяВесьМодуль(ТекстМодуля, МетодКДокументированию.Имя);
        КонецЕсли;
		ОтветМоделиСтр = ОтправитьЗапросOpenAI(ТекстПромпта);
		ЗаполнитьОписаниеМетода(МетодКДокументированию, ОтветМоделиСтр);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОписаниеМетода(МетодКДокументированию, ОтветМоделиСтр)
	Попытка
		СтруктураОписания = JSONВСтруктуру(ОтветМоделиСтр);
	Исключение
		ВызватьИсключение "Неправильный формат ответа от модели, не удалось разобрать JSON";
	КонецПопытки;
	
	Попытка
		МетодКДокументированию.Комментарий = СтруктураОписания.description;
		Если МетодКДокументированию.ЭтоФункция Тогда
			МетодКДокументированию.КомментарийВозвращаемоеЗначение = СтруктураОписания.return_descr;
		КонецЕсли;
		Для каждого Парам Из СтруктураОписания.parameters Цикл
			ИмяПараметра = Парам.name;
			НайденныеСтроки = МетодКДокументированию.ПараметрыМетода.НайтиСтроки(Новый Структура("Имя", ИмяПараметра));
			Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
				СтрокаПараметр = НайденныеСтроки[0];
				Парам.Свойство("type", СтрокаПараметр.Тип);
				Парам.Свойство("descr", СтрокаПараметр.Описание);
			КонецЕсли;
		КонецЦикла;
	Исключение
		ВызватьИсключение "Неправильный формат ответа от модели, не удалось найти поле. " + ОписаниеОшибки();
	КонецПопытки;
КонецПроцедуры

#КонецОбласти



&НаКлиенте
Функция ОтправитьЗапросOpenAI(Текст) Экспорт
    // Проверка наличия ключа API
    Если ПустаяСтрока(КлючAPI) Тогда
        ВызватьИсключение "Не указан ключ API";
    КонецЕсли;
    
    ТекБазовыйАдрес = ?(ЗначениеЗаполнено(БазовыйАдрес), БазовыйАдрес, "https://openrouter.ai/api/v1/chat/completions");
    ТекМодель = ?(ЗначениеЗаполнено(Модель), Модель, "openai/chatgpt-4o-latest");
    
    // Разбор базового адреса
    РазобранныйURL = РазобратьURL(ТекБазовыйАдрес);
    
    // Подготовка HTTP-запроса
    HTTPСоединение = Новый HTTPСоединение(
        РазобранныйURL.Хост, 
        РазобранныйURL.Порт, 
        , 
        , 
        , 
        120, 
        ?(РазобранныйURL.Схема = "https", Новый ЗащищенноеСоединениеOpenSSL, Неопределено));
    HTTPЗапрос = Новый HTTPЗапрос(РазобранныйURL.Путь);
    HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
    HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + КлючAPI);
    
    // Формирование тела запроса
    СтруктураЗапроса = Новый Структура;
    СтруктураЗапроса.Вставить("model", ТекМодель);
    СтруктураЗапроса.Вставить("messages", Новый Массив);
    СтруктураЗапроса.messages.Добавить(Новый Структура("role,content", "user", Текст));
    
    HTTPЗапрос.УстановитьТелоИзСтроки(СтруктураВJSON(СтруктураЗапроса));
    
    // Отправка запроса
    Попытка
        HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
    Исключение
        ВызватьИсключение "Ошибка отправки запроса: " + ОписаниеОшибки();
    КонецПопытки;
    
    // Обработка ответа
	ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
    Если HTTPОтвет.КодСостояния <> 200 Тогда
        ВызватьИсключение СтрШаблон(
	        "Ошибка API. Код: %1, Ответ: %2", 
	        HTTPОтвет.КодСостояния, 
	        ТелоОтвета
        );
    КонецЕсли;
    
    // Разбор JSON-ответа
    ОтветJSON = JSONВСтруктуру(ТелоОтвета);
    
    // Проверка на наличие ошибки в ответе
    Если ОтветJSON.Свойство("error") Тогда
        ВызватьИсключение СтрШаблон(
        "Ошибка API. Код: %1, Сообщение: %2", 
        ОтветJSON.error.code, 
        ТелоОтвета
        );
    КонецЕсли;
    
    Если ОтветJSON.choices.Количество() > 0 Тогда
        Возврат ОтветJSON.choices[0].message.content;
    Иначе
        Возврат "";
    КонецЕсли;
КонецФункции

// Преобразует структура в строку JSON
// 
// Параметры:
//  Объект                  - Структура - которую необходимо преобразовать в строку JSON.
// 
// Возвращаемое значение:
//  Строка - в формате JSON.
&НаКлиенте
Функция СтруктураВJSON(Объект) Экспорт
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Объект);
	
	Возврат ЗаписьJSON.Закрыть();
КонецФункции

// Преобразует строку в формате JSON в структуру.
// 
// Параметры:
//  СтрокаJSON              - Строка - строка в формате JSON.
// 
// Возвращаемое значение:
//  Структура -
&НаКлиенте
Функция JSONВСтруктуру(СтрокаJSON) Экспорт
	// Выделяем в строке JSON часть именно JSON	
	// Находим позицию первого открывающего фигурного скобки
	ПозицияНачала = СтрНайти(СтрокаJSON, "{");
	Если ПозицияНачала = 0 Тогда
		// Если не найдено, возвращаем Неопределено или можно вызвать ошибку
		Возврат Неопределено;
	КонецЕсли;
	
	// Находим позицию последнего закрывающего фигурного скобки, используя поиск с конца
	ПозицияКонца = СтрНайти(СтрокаJSON, "}", НаправлениеПоиска.СКонца);
	Если ПозицияКонца = 0 Тогда
		// Если закрывающая скобка не найдена, возвращаем Неопределено
		Возврат Неопределено;
	КонецЕсли;
	
	// Вычисляем длину фрагмента с JSON: от первого "{" до последнего "}" включительно
	ДлинаФрагмента = ПозицияКонца - ПозицияНачала + 1;
	
	// Извлекаем корректную часть JSON из строки
	ЧистыйJSON = Сред(СтрокаJSON, ПозицияНачала, ДлинаФрагмента);
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ЧистыйJSON);
	
	Результат = ПрочитатьJSON(ЧтениеJSON);
	
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;
КонецФункции


&НаКлиенте
Функция РазобратьURL(Знач URL) Экспорт
    РезультатРазбора = Новый Структура("Схема, Хост, Порт, Путь");
    
    // Проверка и удаление протокола
    Если НРег(Лев(URL, 8)) = "https://" Тогда
        РезультатРазбора.Схема = "https";
        URL = Сред(URL, 9);
    ИначеЕсли НРег(Лев(URL, 7)) = "http://" Тогда
        РезультатРазбора.Схема = "http";
        URL = Сред(URL, 8);
    Иначе
        ВызватьИсключение "Неверный формат URL: отсутствует протокол http или https";
    КонецЕсли;
    
    // Разделение хоста, порта и пути
    ПозицияСлеш = СтрНайти(URL, "/");
    Если ПозицияСлеш > 0 Тогда
        ХостИПорт = Лев(URL, ПозицияСлеш - 1);
        РезультатРазбора.Путь = Сред(URL, ПозицияСлеш);
    Иначе
        ХостИПорт = URL;
        РезультатРазбора.Путь = "/";
    КонецЕсли;
    
    // Разделение хоста и порта
    ПозицияДвоеточие = СтрНайти(ХостИПорт, ":");
    Если ПозицияДвоеточие > 0 Тогда
        РезультатРазбора.Хост = Лев(ХостИПорт, ПозицияДвоеточие - 1);
        РезультатРазбора.Порт = Число(Сред(ХостИПорт, ПозицияДвоеточие + 1));
    Иначе
        РезультатРазбора.Хост = ХостИПорт;
        РезультатРазбора.Порт = ?(РезультатРазбора.Схема = "https", 443, 80);
    КонецЕсли;
    
    Возврат РезультатРазбора;
КонецФункции

&НаКлиенте
Функция СформироватьПромптДляДокументированияАнализируяТолькоМетод(КодМетода)
    ТекстПромпта = 
    "Analyze the provided 1C method code and generate documentation in JSON format.
    |
    |- Extract the method's purpose and provide a clear description.
    |- Identify and list each parameter by name, specifying its type and description.
    |- Determine the return value and describe it, including its type.
    |
    |# Steps
    |
    |1. **Extract Description**: Understand the functionality and purpose of the method from the code.
    |2. **Identify Parameters**: Identify the parameters used in the method, detailing their name, type, and purpose.
    |3. **Determine Return Value**: Examine the method to understand what it returns, noting the type and a brief description.
    |
    |# Output Format
    |
    |Provide a JSON object in the following format:
    |```json
    |{
    |  ""description"": ""<описание назначения метода, максимум 100 символов>"",
    |  ""parameters"": [
    |    {
    |      ""name"": ""<имя параметра 1>"",
    |      ""type"": ""<тип параметра 1>"",
    |      ""descr"": ""<описание параметра 1, максимум 70 символов>""
    |    },
    |    {
    |      ""name"": ""<имя параметра 2>"",
    |      ""type"": ""<тип параметра 2>"",
    |      ""descr"": ""<описание параметра 2>""
    |    }
    |  ],
    |  ""return_descr"": ""<описание возвращаемого значения в формате Тип - Описание, максимум 100 символов>""
    |}
    |```
    |
    |# Examples
    |
    |**Example Input:**
    |```1C
    |&НаСервере
    |Функция ПолучитьИмя(ИдСотрудника)
    |Возврат Справочники.Сотрудники.НайтиПоКоду(ИдСотрудника).Имя;
    |КонецФункции
    |```
    |
    |**Example Output:**
    |```json
    |{
    |  ""description"": ""Возвращает имя сотрудника по его идентификатору"",
    |  ""parameters"": [
    |    {
    |      ""name"": ""ИдСотрудника"",
    |      ""type"": ""Строка"",
    |      ""descr"": ""Идентификатор сотрудника""
    |    }
    |  ],
    |  ""return_descr"": ""Строка - Имя сотрудника""
    |}
    |```
    |
    |# Notes
    |
    |- Ensure accuracy in describing the method's function, parameters, and return values.
    |- Handle any edge cases such as optional parameters or lack of return values gracefully.
    |- Descriptions are in Russian.
    |
    |# Code to Analyze:
    |```1C
    |" + КодМетода + "
    |```";
    
    Возврат ТекстПромпта;
    
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.МетодыКДокументированию.ТекущаяСтрока = МетодыКДокументированию[0].ПолучитьИдентификатор();
КонецПроцедуры

&НаКлиенте
Процедура МетодыКДокументированиюПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.МетодыКДокументированию.ТекущиеДанные;
	Элементы.МетодыКДокументированиюКомментарийВозвращаемоеЗначение.Видимость = 
		ТекДанные <> Неопределено И ТекДанные.ЭтоФункция;
КонецПроцедуры

&НаКлиенте
Функция СформироватьПромптДляДокументированияАнализируяВесьМодуль(ТекстМодуля, ИмяМетода)
    ТекстПромпта = 
    "Analyze the provided 1C module code to document the specified method in JSON format.
	|
	|- Extract the method's purpose and provide a clear description.
	|- Identify and list each parameter by name, specifying its type and description.
	|- Determine the return value and describe it, including its type.
	|
	|# Steps
	|
	|1. **Locate Method**: Identify and extract the specified method from the provided module code.
	|2. **Extract Description**: Understand the functionality and purpose of the method.
	|3. **Identify Parameters**: Identify the parameters used in the method, detailing their name, type, and purpose.
	|4. **Determine Return Value**: Examine the method to understand what it returns, noting the type and a brief description.
	|
	|# Output Format
	|
	|Provide a JSON object in the following format:
	|
    |```json
    |{
    |  ""description"": ""<описание назначения метода>"",
    |  ""parameters"": [
    |    {
    |      ""name"": ""<имя параметра 1>"",
    |      ""type"": ""<тип параметра 1>"",
    |      ""descr"": ""<описание параметра 1, максимум 70 символов>""
    |    },
    |    {
    |      ""name"": ""<имя параметра 2>"",
    |      ""type"": ""<тип параметра 2>"",
    |      ""descr"": ""<описание параметра 2>""
    |    }
    |  ],
    |  ""return_descr"": ""<описание возвращаемого значения в формате Тип - Описание, максимум 100 символов>""
    |}
	|
	|# Examples
	|
	|**Example Input:**
	|```1C
	|&НаСервере
	|Модуль УправлениеСотрудниками;
	|Функция ПолучитьИмя(ИдСотрудника)
	|    Возврат Справочники.Сотрудники.НайтиПоКоду(ИдСотрудника).Имя;
	|КонецФункции
	|
	|Функция ПолучитьДолжность(ИдСотрудника)
	|    Возврат Справочники.Сотрудники.НайтиПоКоду(ИдСотрудника).Должность;
	|КонецФункции
	|```
	|
	|**Example Method Name:** ""ПолучитьИмя""
	|
	|**Example Output:**
	|
	|{
	|  ""description"": ""Возвращает имя сотрудника по его идентификатору"",
	|  ""parameters"": [
	|    {
	|      ""name"": ""ИдСотрудника"",
	|      ""type"": ""Строка"",
	|      ""descr"": ""Идентификатор сотрудника""
	|    }
	|  ],
	|  ""return_descr"": ""Строка - Имя сотрудника""
	|}
	|
	|# Notes
	|
	|- Ensure accuracy in describing the method's function, parameters, and return values.
	|- Handle any edge cases such as optional parameters or lack of return values gracefully.
	|- Descriptions are in Russian.
    |
    |# Code to Analyze:
    |```1C
    |" + ТекстМодуля + "
    |```
	|
	|**Method Name:** " + ИмяМетода;
    
    Возврат ТекстПромпта;
КонецФункции
