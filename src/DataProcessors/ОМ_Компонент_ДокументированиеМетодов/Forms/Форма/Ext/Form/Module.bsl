// Репозиторий проекта: 
// https://github.com/vladimir-kharin/1c_formatter
// 
// Харин Владимир (С) 2025. https://vharin.ru
// Telegram - https://t.me/vladimir_kharin

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("ПараметрыКоманды") Тогда
		АдресДереваСтруктурыМодулей = Параметры.ПараметрыКоманды.АдресДереваСтруктурыМодулей;
	        дз = ПолучитьИзВременногоХранилища(АдресДереваСтруктурыМодулей);
		Если Параметры.ПараметрыКоманды.Идентификатор = "ДокументированиеВыбранногоМетодаСНастройкой" Тогда
	            дз.Колонки.Добавить("НомерСтрокиВМетодыКДокументированию");
			
	            ВыбраннаяСтрока = Обработки.ОМ_ОформляторМодулей.НайтиВыбраннуюСтроку(дз);
			
	            МассивМетодов = Новый Массив;
			Если ВыбраннаяСтрока.ТипЭлемента = "Процедура" ИЛИ ВыбраннаяСтрока.ТипЭлемента = "Функция" Тогда
				МассивМетодов.Добавить(ВыбраннаяСтрока);
			ИначеЕсли ВыбраннаяСтрока.ТипЭлемента = "Область" ИЛИ ВыбраннаяСтрока.ТипЭлемента = "Модуль" Тогда
				МассивМетодов = Обработки.ОМ_ОформляторМодулей.НайтиПодчиненныеСтроки(ВыбраннаяСтрока, "Процедура,Функция");
			КонецЕсли;
			
			СтрМодуль = Обработки.ОМ_ОформляторМодулей.НайтиСтрокуМодуля(ВыбраннаяСтрока);
			ТекстМодуля = Обработки.ОМ_Компонент_ГенерацияТекстовМодулей.ТекстМодуля(СтрМодуль);
			
			ОдинМетод = (МассивМетодов.Количество() = 1);
			
			НомерСтроки = 1;
			Для каждого СтрМетод Из МассивМетодов Цикл
				МетодКДокументированию = МетодыКДокументированию.Добавить();
				ЗаполнитьЗначенияСвойств(МетодКДокументированию, СтрМетод.Содержимое, "Имя,ЭтоФункция,Комментарий,КомментарийВозвращаемоеЗначение");
				МетодКДокументированию.ТекстМетода = Обработки.ОМ_Компонент_ГенерацияТекстовМодулей.ГенерироватьТекстМетода(СтрМетод, Истина, Ложь);
				МетодКДокументированию.ПараметрыМетода.Загрузить(СтрМетод.Содержимое.Параметры);
				МетодКДокументированию.Пометка = ОдинМетод ИЛИ СтрМетод.Содержимое.Экспортная;
				МетодКДокументированию.НомерКартинки = ?(МетодКДокументированию.ЭтоФункция, 1, 0);
				
	                СтрМетод.НомерСтрокиВМетодыКДокументированию = НомерСтроки;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
	
	            ПоместитьВоВременноеХранилище(дз, АдресДереваСтруктурыМодулей);
			
			// Устанавливаем текущую страницу в зависимости от количества методов
			Элементы.СтраницыОдинНесколько.ТекущаяСтраница = ?(ОдинМетод,
				Элементы.СтраницаОдинМетод,
				Элементы.СтраницаНесколькоМетодов);
		КонецЕсли;
			
		Анализировать = "ТолькоМетод";
	Иначе
		ВызватьИсключение "В форму должен быть передан параметр ПараметрыКоманды.АдресДереваСтруктурыМодулей";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.МетодыКДокументированию.ТекущаяСтрока = МетодыКДокументированию[0].ПолучитьИдентификатор();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМетодыКДокументированию

&НаКлиенте
Процедура МетодыКДокументированиюПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.МетодыКДокументированию.ТекущиеДанные;
	Элементы.МетодыКДокументированиюКомментарийВозвращаемоеЗначение.Видимость = 
		ТекДанные <> Неопределено И ТекДанные.ЭтоФункция;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ГенерироватьОписание(Команда)
	Для каждого МетодКДокументированию Из МетодыКДокументированию Цикл
		Если НЕ МетодКДокументированию.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КлючAPI) Тогда
			Если Анализировать = "ТолькоМетод" Тогда
				ТекстПромпта = СформироватьПромптДляДокументированияАнализируяТолькоМетод(МетодКДокументированию.ТекстМетода);
			ИначеЕсли Анализировать = "ВесьМодуль" Тогда
				ТекстПромпта = СформироватьПромптДляДокументированияАнализируяВесьМодуль(ТекстМодуля, МетодКДокументированию.Имя);
			КонецЕсли;
			ОтветМоделиСтр = ОМ_КлиентИИ.ОтправитьЗапросOpenAI(ТекстПромпта, КлючAPI, БазовыйАдрес, Модель);
		Иначе
			ОтветМоделиСтр = ДокументироватьМетодСервисомПоУмолчанию(МетодКДокументированию);
		КонецЕсли;
		
		ЗаполнитьОписаниеМетода(МетодКДокументированию, ОтветМоделиСтр);
		
		Если МетодыКДокументированию.Количество() > 1 Тогда
			МетодКДокументированию.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПринятьИЗакрыть(Команда)
	ПринятьИЗакрытьНаСервере();
	Закрыть(Новый Структура("АдресДереваСтруктурыМодулей", АдресДереваСтруктурыМодулей));
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	Для каждого МетодКДокументированию Из МетодыКДокументированию Цикл
		МетодКДокументированию.Пометка = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	Для каждого МетодКДокументированию Из МетодыКДокументированию Цикл
		МетодКДокументированию.Пометка = Ложь;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнитьОписаниеМетода(МетодКДокументированию, ОтветМоделиСтр)
	Попытка
		СтруктураОписания = ОМ_КлиентИИ.JSONВСтруктуру(ОтветМоделиСтр);
	Исключение
		ВызватьИсключение "Неправильный формат ответа от модели, не удалось разобрать JSON";
	КонецПопытки;
	
	Попытка
		МетодКДокументированию.Комментарий = СтруктураОписания.description;
		Если МетодКДокументированию.ЭтоФункция Тогда
			МетодКДокументированию.КомментарийВозвращаемоеЗначение = СтруктураОписания.return_descr;
		КонецЕсли;
		Для каждого Парам Из СтруктураОписания.parameters Цикл
			ИмяПараметра = Парам.name;
			НайденныеСтроки = МетодКДокументированию.ПараметрыМетода.НайтиСтроки(Новый Структура("Имя", ИмяПараметра));
			Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
				СтрокаПараметр = НайденныеСтроки[0];
				Парам.Свойство("type", СтрокаПараметр.Тип);
				Парам.Свойство("descr", СтрокаПараметр.Описание);
			КонецЕсли;
		КонецЦикла;
	Исключение
		ВызватьИсключение "Неправильный формат ответа от модели, не удалось найти поле. " + ОписаниеОшибки();
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Функция СформироватьПромптДляДокументированияАнализируяТолькоМетод(КодМетода)
	ТекстПромпта = 
	"Analyze the provided 1C method code and generate documentation in JSON format.
	|
	|- Extract the method's purpose and provide a clear description.
	|- Identify and list each parameter by name, specifying its type and description.
	|- Determine the return value and describe it, including its type.
	|
	|# Steps
	|
	|1. **Extract Description**: Understand the functionality and purpose of the method from the code.
	|2. **Identify Parameters**: Identify the parameters used in the method, detailing their name, type, and purpose.
	|3. **Determine Return Value**: Examine the method to understand what it returns, noting the type and a brief description.
	|
	|# Output Format
	|
	|Provide a JSON object in the following format:
	|```json
	|{
	|  ""description"": ""<описание назначения метода>"",
	|  ""parameters"": [
	|    {
	|      ""name"": ""<имя параметра 1>"",
	|      ""type"": ""<тип параметра 1>"",
	|      ""descr"": ""<описание параметра 1>""
	|    },
	|    {
	|      ""name"": ""<имя параметра 2>"",
	|      ""type"": ""<тип параметра 2>"",
	|      ""descr"": ""<описание параметра 2>""
	|    }
	|  ],
	|  ""return_descr"": ""<описание возвращаемого значения в формате Тип - Описание, максимум 100 символов>""
	|}
	|```
	|
	|# Examples
	|
	|**Example Input:**
	|```1C
	|&НаСервере
	|Функция ПолучитьИмя(ИдСотрудника)
	|Возврат Справочники.Сотрудники.НайтиПоКоду(ИдСотрудника).Имя;
	|КонецФункции
	|```
	|
	|**Example Output:**
	|```json
	|{
	|  ""description"": ""Возвращает имя сотрудника по его идентификатору"",
	|  ""parameters"": [
	|    {
	|      ""name"": ""ИдСотрудника"",
	|      ""type"": ""Строка"",
	|      ""descr"": ""Идентификатор сотрудника""
	|    }
	|  ],
	|  ""return_descr"": ""Строка - Имя сотрудника""
	|}
	|```
	|
	|# Notes
	|
	|- Ensure accuracy in describing the method's function, parameters, and return values.
	|- Handle any edge cases such as optional parameters or lack of return values gracefully.
	|- Descriptions are in Russian.
	|
	|# Context
	|
	|<knowladge>
	|" + ДопИнфоКонтекст + "
	|</knowladge>
	|
	|# Code to Analyze:
	|```1C
	|" + КодМетода + "
	|```";

	Возврат ТекстПромпта;
КонецФункции

&НаКлиенте
Функция СформироватьПромптДляДокументированияАнализируяВесьМодуль(ТекстМодуля, ИмяМетода)
	ТекстПромпта = 
	    "Analyze the provided 1C module code to document the specified method in JSON format.
	|
	|- Extract the method's purpose and provide a clear description.
	|- Identify and list each parameter by name, specifying its type and description.
	|- Determine the return value and describe it, including its type.
	|
	|# Steps
	|
	|1. **Locate Method**: Identify and extract the specified method from the provided module code.
	|2. **Extract Description**: Understand the functionality and purpose of the method.
	|3. **Identify Parameters**: Identify the parameters used in the method, detailing their name, type, and purpose.
	|4. **Determine Return Value**: Examine the method to understand what it returns, noting the type and a brief description.
	|
	|# Output Format
	|
	|Provide a JSON object in the following format:
	|
	|```json
	|{
	|  ""description"": ""<описание назначения метода>"",
	|  ""parameters"": [
	|    {
	|      ""name"": ""<имя параметра 1>"",
	|      ""type"": ""<тип параметра 1>"",
	|      ""descr"": ""<описание параметра 1>""
	|    },
	|    {
	|      ""name"": ""<имя параметра 2>"",
	|      ""type"": ""<тип параметра 2>"",
	|      ""descr"": ""<описание параметра 2>""
	|    }
	|  ],
	|  ""return_descr"": ""<описание возвращаемого значения в формате Тип - Описание, максимум 100 символов>""
	|}
	|
	|# Examples
	|
	|**Example Input:**
	|```1C
	|&НаСервере
	|Модуль УправлениеСотрудниками;
	|Функция ПолучитьИмя(ИдСотрудника)
	|    Возврат Справочники.Сотрудники.НайтиПоКоду(ИдСотрудника).Имя;
	|КонецФункции
	|
	|Функция ПолучитьДолжность(ИдСотрудника)
	|    Возврат Справочники.Сотрудники.НайтиПоКоду(ИдСотрудника).Должность;
	|КонецФункции
	|```
	|
	|**Example Method Name:** ""ПолучитьИмя""
	|
	|**Example Output:**
	|
	|{
	|  ""description"": ""Возвращает имя сотрудника по его идентификатору"",
	|  ""parameters"": [
	|    {
	|      ""name"": ""ИдСотрудника"",
	|      ""type"": ""Строка"",
	|      ""descr"": ""Идентификатор сотрудника""
	|    }
	|  ],
	|  ""return_descr"": ""Строка - Имя сотрудника""
	|}
	|
	|# Notes
	|
	|- Ensure accuracy in describing the method's function, parameters, and return values.
	|- Handle any edge cases such as optional parameters or lack of return values gracefully.
	|- Descriptions are in Russian.
	|
    |# Context
    |
    |<knowladge>
    |" + ДопИнфоКонтекст + "
    |</knowladge>
    |
	|# Code to Analyze:
	|```1C
	|" + ТекстМодуля + "
	|```
	|
	|**Method Name:** " + ИмяМетода;
	    
    Возврат ТекстПромпта;
КонецФункции

&НаКлиенте
Функция ДокументироватьМетодСервисомПоУмолчанию(МетодКДокументированию)
	Соединение = Новый HTTPСоединение("vharin.ru",,,,,, Новый ЗащищенноеСоединениеOpenSSL);
	Запрос = Новый HTTPЗапрос;
	Запрос.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	Если Анализировать = "ТолькоМетод" Тогда
		Запрос.АдресРесурса = "/ai_api/standalone_method_doc";
		ТелоЗапроса = Новый Структура;
		ТелоЗапроса.Вставить("method_text", МетодКДокументированию.ТекстМетода);
		ТелоЗапроса.Вставить("context", ДопИнфоКонтекст);
	ИначеЕсли Анализировать = "ВесьМодуль" Тогда
		Запрос.АдресРесурса = "/ai_api/module_method_doc";
		ТелоЗапроса = Новый Структура;
		ТелоЗапроса.Вставить("method_name", МетодКДокументированию.Имя);
		ТелоЗапроса.Вставить("module_text", ТекстМодуля);
		ТелоЗапроса.Вставить("context", ДопИнфоКонтекст);
	КонецЕсли;
	
	Запрос.УстановитьТелоИзСтроки(ОМ_КлиентИИ.СтруктураВJSON(ТелоЗапроса));
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение "Ошибка при обращении к сервису документирования: " + Ответ.КодСостояния + " " + Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	Возврат Ответ.ПолучитьТелоКакСтроку();
КонецФункции

&НаСервере
Процедура ПринятьИЗакрытьНаСервере()
	дз = ПолучитьИзВременногоХранилища(АдресДереваСтруктурыМодулей);
	
	Для Индекс = 0 По МетодыКДокументированию.Количество() - 1 Цикл
		МетодКДокументированию = МетодыКДокументированию[Индекс];
		
		// Находим строку метода в дереве по номеру строки
		СтрокиМетода = дз.Строки.НайтиСтроки(Новый Структура("НомерСтрокиВМетодыКДокументированию", Индекс + 1), Истина);
		Если СтрокиМетода.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаМетода = СтрокиМетода[0];
		
		// Обновляем параметры метода в дереве
		СтрокаМетода.Содержимое.Комментарий = МетодКДокументированию.Комментарий;
		СтрокаМетода.Содержимое.КомментарийВозвращаемоеЗначение = МетодКДокументированию.КомментарийВозвращаемоеЗначение;
		
		// Обновляем параметры метода
		СтрокаМетода.Содержимое.Параметры.Очистить();
		Для каждого СтрокаПараметра Из МетодКДокументированию.ПараметрыМетода Цикл
			НоваяСтрока = СтрокаМетода.Содержимое.Параметры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПараметра);
		КонецЦикла;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(дз, АдресДереваСтруктурыМодулей);
КонецПроцедуры

#КонецОбласти

